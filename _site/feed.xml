<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-25T12:55:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MINSQL</title><subtitle>밥먹고 살기 힘든 부부 DBA</subtitle><entry><title type="html">Crash recovery and Data integrity on MySQL</title><link href="http://localhost:4000/blog/crash-recovery-and-data-integrity-on-mysql/" rel="alternate" type="text/html" title="Crash recovery and Data integrity on MySQL" /><published>2018-09-07T00:00:00+09:00</published><updated>2018-09-07T00:00:00+09:00</updated><id>http://localhost:4000/blog/crash-recovery-and-data-integrity-on-mysql</id><content type="html" xml:base="http://localhost:4000/blog/crash-recovery-and-data-integrity-on-mysql/">&lt;h1 id=&quot;crash-recovery-on-mysql&quot;&gt;Crash recovery on MySQL&lt;/h1&gt;

&lt;h2 id=&quot;extra-data-on-recovered-master&quot;&gt;Extra data on recovered master&lt;/h2&gt;
&lt;p&gt;https://www.percona.com/community-blog/2018/08/23/question-about-semi-synchronous-replication-answer-with-all-the-details/&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;매우 주의깊에 읽어보아야한다. 이건 semi-sync뿐만이 아니라 일반 replication구조에서도 일어나는 일이다. 
crash recovery 할때 mysql 은 innodb redo log랑 binary log 모두를 확인해서 recovery 해준다. 이때 slave가 읽어가지 못한 event가 mysql binary log에만 쓰여있었다면, 이것까지 다 recovery 한다. 즉, recovered master 가 slave보다 데이터가 더 많다. 이것이 어떤 영향이 있는지는 replication을 사용하는 사용자라면 반드시 확인해야한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;storage-engine-commit-and-binlog-commit&quot;&gt;Storage engine commit and binlog commit&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;5.7.10이후, innodb_support_xa = 1로 무조건 활성화이다. 이 옵션은 binary_log와, redo_log 를 2 phase commit하도록 해주는데, binary log group commit을 지원하면서 무조건 활성화가 되었다. 비활성화자체가 막혀있다.
    &lt;ul&gt;
      &lt;li&gt;참조 : http://minsql.com/blog/semi-synchronous-replication-on-mysql/#distributed-transaction-processing-using-xa&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정리하면, mysql commit의 process는 다음과 같다.
    &lt;ol&gt;
      &lt;li&gt;Innodb prepare&lt;/li&gt;
      &lt;li&gt;Binlog commit&lt;/li&gt;
      &lt;li&gt;InnoDB commit&lt;/li&gt;
      &lt;li&gt;Commit return&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;crash recovery 는 XA recovery를 포함한다. 즉, redo log, binary log 모두를 읽어서 최대한 rollforward시키고, rollback한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;관련-다른-parameters&quot;&gt;관련 다른 parameters&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;innodb_flush_log_at_trx_commit : 설정에 따라서 redo log를 fsync 한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sync_binlog : 설정에 따라서 binlog를 fsync한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;두 파라메터에 따라서 event가 redo, binlog file에 있거나 없거나 할수 있다. 더 복잡하니까 여기서 모두 1로 설정했다고 가정해보자. (실제 default값이기도 하니)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;do-some-test1&quot;&gt;Do some test1&lt;/h3&gt;
&lt;h4 id=&quot;1-load-generator--sysbench-num-threads100-insertlua-1개-테이블에-인서트를-미친듯이-하는-부하를-만들자&quot;&gt;1. Load generator : sysbench, num-threads=100, insert.lua 1개 테이블에 인서트를 미친듯이 하는 부하를 만들자.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysbench --mysql-user=sbtest --mysql-password=sbtest --mysql-db=sbtest --mysql-host=host1 --mysql-port=3306 --mysql-socket=/tmp/mysql.sock --oltp-table-name=sbtest --oltp-tables-count=1 --test='/usr/share/doc/sysbench/tests/db/insert.lua' --num-threads=100 --max-time=600 --max-requests=0 --report-interval=10 run &amp;gt; sysbench.out &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-kill-your-master&quot;&gt;2. kill your master&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9 $(pid_of_mysql)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-check-binlog&quot;&gt;3. check binlog&lt;/h4&gt;
&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-rw-r-----  1 mysql dba  120891584 Sep  7 12:23 binary_log.000001
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@new master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Master_Log_File: binary_log.000001
Read_Master_Log_Pos: 120881044
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@Slave&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Master_Log_File: binary_log.000001
Read_Master_Log_Pos: 120881044
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-&amp;gt; crashed old master 에 120891584 썼는데, slaves는 120881044까지만 읽었다.&lt;/p&gt;

&lt;h4 id=&quot;4-case-1--disk-fault가-아니라서-binlog를-살렸다고-가정하자&quot;&gt;4. Case 1 : Disk fault가 아니라서 binlog를 살렸다고 가정하자.&lt;/h4&gt;

&lt;h4 id=&quot;5-failover-to-new-master&quot;&gt;5. Failover to new master&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;new master는 read master log position까지 모두 execute하고, new master가 되었다. 다른 slave 는 이제 change master to new master했다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Seconds_Behind_Master: NULL&lt;/code&gt; 을 확인한다.&lt;/li&gt;
  &lt;li&gt;상태를 확인하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;stop slave;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-old-master-recovery&quot;&gt;6. old master recovery&lt;/h4&gt;
&lt;p&gt;@old master&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;mysql start&lt;/li&gt;
  &lt;li&gt;crash recovery를 진행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;7-check-data&quot;&gt;7. check data&lt;/h4&gt;
&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:15:14&amp;gt;select max(id) from sbtest.sbtest1;
+---------+
| max(id) |
+---------+
|  225605 |
+---------+
1 row in set (0.00 sec)

root@localhost:(none) 12:15:20&amp;gt;select count(1) from sbtest.sbtest1;
+----------+
| count(1) |
+----------+
|   225605 |
+----------+
1 row in set (0.04 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;@new master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:13:27&amp;gt;select max(id) from sbtest.sbtest1;
+---------+
| max(id) |
+---------+
|  225591 |
+---------+
1 row in set (0.00 sec)


root@localhost:(none) 12:13:22&amp;gt;select count(1) from sbtest.sbtest1;
+----------+
| count(1) |
+----------+
|   225591 |
+----------+
1 row in set (0.04 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;@slave&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:13:29&amp;gt;select max(id) from sbtest.sbtest1;
+---------+
| max(id) |
+---------+
|  225591 |
+---------+
1 row in set (0.00 sec)


root@localhost:(none) 12:13:08&amp;gt;select count(1) from sbtest.sbtest1;
+----------+
| count(1) |
+----------+
|   225591 |
+----------+
1 row in set (0.04 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;8-client-log-check&quot;&gt;8. client log check&lt;/h4&gt;

&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:15:24&amp;gt;select * from sbtest.sbtest1 order by id desc limit 1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 225605 | 4957 | 79888982258-61333436979-80792591123-92607263374-50040800467-73148416263-58685905075-76204100553-62710261379-83642825584 | 82186729862-84739608722-43812298929-12190970088-77403548167 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)


root@localhost:(none) 12:16:06&amp;gt;select * from sbtest.sbtest1 order by id desc limit 14,1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 225591 | 5035 | 83125079753-76845493068-07999607293-02239216888-35640473802-91341354975-57883153786-83817135971-70529862698-88205345062 | 31394025583-27745092928-31936443034-19236847994-74971533578 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@new master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:14:48&amp;gt;select * from sbtest.sbtest1 order by id desc limit 1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 225591 | 5035 | 83125079753-76845493068-07999607293-02239216888-35640473802-91341354975-57883153786-83817135971-70529862698-88205345062 | 31394025583-27745092928-31936443034-19236847994-74971533578 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@client&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cat sysbench_2.out | grep  79888982258-6
ALERT: failed to execute MySQL query: `INSERT INTO sbtest1 (id, k, c, pad) VALUES (0, 4957, '79888982258-61333436979-80792591123-92607263374-50040800467-73148416263-58685905075-76204100553-62710261379-83642825584', '82186729862-84739608722-43812298929-12190970088-77403548167')`:

# cat sysbench_2.out | grep  83125079753-7
ALERT: failed to execute MySQL query: `INSERT INTO sbtest1 (id, k, c, pad) VALUES (0, 5035, '83125079753-76845493068-07999607293-02239216888-35640473802-91341354975-57883153786-83817135971-70529862698-88205345062', '31394025583-27745092928-31936443034-19236847994-74971533578')`:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;-&amp;gt; semisync, slave 에 들어간데이터이지만 클라이언트는 fail을 받았음&lt;/p&gt;

&lt;p&gt;@ old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:19:20&amp;gt;select * from sbtest.sbtest1 order by id desc limit 81,1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 225524 | 5042 | 19722710887-41825524483-02611698822-07466480779-06500555688-30200956896-61619612159-87044566968-90038382663-22637007087 | 09802447442-78333893251-51199296003-01335745442-88653326619 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)

root@localhost:(none) 12:19:29&amp;gt;select * from sbtest.sbtest1 order by id desc limit 82,1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 225523 | 4999 | 88830428108-21244349412-30076967478-44105296476-54457874100-32901524878-27481376778-84719973276-31930124008-75583547021 | 38444850712-91591550394-45494076064-29120744229-79922105662 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@client&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cat sysbench.out | grep  19722710887
ALERT: failed to execute MySQL query: `INSERT INTO sbtest1 (id, k, c, pad) VALUES (0, 5042, '19722710887-41825524483-02611698822-07466480779-06500555688-30200956896-61619612159-87044566968-90038382663-22637007087', '09802447442-78333893251-51199296003-01335745442-88653326619')`:
# cat sysbench.out | grep  88830428108-
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;-&amp;gt; 81건은 클라이언트가 fail했는데 존재하는 된 데이터임&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;which data is correct?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../uploads/crash_recovery_data1.png&quot; alt=&quot;crash_recovery_data1&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;client가 fail을 받은 데이터도 이미 slave에 존재한다. 어디까지 commit 으로 봐야하는 것일까? 이를 염두해두고 retry해야할 것 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;9-what-happen-next&quot;&gt;9. what happen next?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;이상태에서 old master를 그대로 붙이면?
    &lt;ul&gt;
      &lt;li&gt;master-standby master 서로 master로 바라보는 구성이라면, new master만 old master의 binlog를 읽을 수 있게 되기때문에 데이터가 깨진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:21:35&amp;gt; select count(1) from sbtest.sbtest1
    -&amp;gt; ;
+----------+
| count(1) |
+----------+
|   225605 |
+----------+
1 row in set (0.05 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;@new Master_Bind&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:21:36&amp;gt;select count(1) from sbtest.sbtest1
    -&amp;gt; ;
+----------+
| count(1) |
+----------+
|   225605 |
+----------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;@slave&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 12:21:36&amp;gt;select count(1) from sbtest.sbtest1
    -&amp;gt; ;
+----------+
| count(1) |
+----------+
|   225591 |
+----------+
1 row in set (0.04 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;slave는 데이터를 잃게됨.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;심지어 new master가 service-in이 먼저 되었다면, dup이 나게됨.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;do-some-test1-1&quot;&gt;Do some test1&lt;/h3&gt;
&lt;h4 id=&quot;1-load-generator--same-as-above&quot;&gt;1. Load generator : same as above&lt;/h4&gt;
&lt;h4 id=&quot;2-kill-your-master--same-as-above&quot;&gt;2. kill your master : same as above&lt;/h4&gt;
&lt;h4 id=&quot;3-check-binlog-1&quot;&gt;3. check binlog&lt;/h4&gt;
&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-rw-r-----  1 mysql dba  118960128 Sep  7 12:12 binary_log.000080
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@new master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Master_Log_File: binary_log.000080
Read_Master_Log_Pos: 118952543
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@Slave&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Master_Log_File: binary_log.000080
Read_Master_Log_Pos: 118952543
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;-&amp;gt; crashed old master 에 118960128까지 썼는데, slaves는 118952543까지만 읽었다.&lt;/p&gt;

&lt;h4 id=&quot;4-case-2--disk-fault로-binlog가-더이상-fsync되지-않았거나-binary-log-file-을-loss한-상황을-가정하자&quot;&gt;4. Case 2 : Disk fault로 binlog가 더이상 fsync되지 않았거나, binary log file 을 loss한 상황을 가정하자.&lt;/h4&gt;

&lt;h4 id=&quot;5-failover-to-new-master-1&quot;&gt;5. Failover to new master&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;new master는 read master log position까지 모두 execute하고, new master가 되었다. 다른 slave 는 이제 change master to new master했다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Read_Master_Log_Pos = Exec_Master_Log_Pos&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;Seconds_Behind_Master: NULL&lt;/code&gt; 을 확인한다.&lt;/li&gt;
      &lt;li&gt;이시점의 상태를 확인하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;stop slave;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6-old-master-recovery-1&quot;&gt;6. old master recovery&lt;/h4&gt;
&lt;p&gt;@old master&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;old master의 binlog를 지우고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;# mv binary_log.* /tmp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;mysql start&lt;/li&gt;
  &lt;li&gt;crash recovery를 진행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;7-check-data-1&quot;&gt;7. check data&lt;/h4&gt;

&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 13:47:20&amp;gt;select count(1) from sbtest.sbtest1;
+----------+
| count(1) |
+----------+
|   229209 |
+----------+
1 row in set (0.05 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;@new master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 13:46:14&amp;gt;select count(1) from sbtest.sbtest1;
+----------+
| count(1) |
+----------+
|   229222 |
+----------+
1 row in set (0.04 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@slave&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 13:46:28&amp;gt;select count(1) from sbtest.sbtest1;
+----------+
| count(1) |
+----------+
|   229222 |
+----------+
1 row in set (0.05 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;xa recovery없이 innodb crash recovery만 진행한다면 binlog를 이미 받아간 slave가 더 많은 데이터를 가진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;8-client-log-check-1&quot;&gt;8. client log check&lt;/h4&gt;

&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 13:47:30&amp;gt;select * from sbtest.sbtest1 order by id desc limit 1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 229209 | 4977 | 52525542740-05883112138-31077642195-30054907937-74064462099-00624225210-35448309266-20632804320-25010658277-64451131942 | 17224000256-29616103547-98113363624-95788647627-13387357230 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@client&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cat sysbench.out
| grep 52525542740
ALERT: failed to execute MySQL query: `INSERT INTO sbtest1 (id, k, c, pad) VALUES (0, 4977, '52525542740-05883112138-31077642195-30054907937-74064462099-00624225210-35448309266-20632804320-25010658277-64451131942', '17224000256-29616103547-98113363624-95788647627-13387357230')`:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@old master&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 13:49:48&amp;gt;select * from sbtest.sbtest1 order by id desc limit 63,1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 229146 | 4970 | 48816247772-28840252430-30124535351-86953376118-43261578464-07669086776-76606208916-35289918736-10147949924-75820442447 | 64065821923-83179322010-08568364668-73745057832-25089710423 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)


root@localhost:(none) 13:49:08&amp;gt;select * from sbtest.sbtest1 order by id desc limit 64,1;
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| id     | k    | c                                                                                                                       | pad                                                         |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
| 229145 | 4094 | 65666863675-30753985605-04616122135-38522455755-59504944319-44228740748-05905600041-71299214749-25530614096-46064840095 | 24274878022-13012603299-64736092749-48519901391-20055400636 |
+--------+------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;@client&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cat sysbench.out | grep 48816247772-
ALERT: failed to execute MySQL query: `INSERT INTO sbtest1 (id, k, c, pad) VALUES (0, 4970, '48816247772-28840252430-30124535351-86953376118-43261578464-07669086776-76606208916-35289918736-10147949924-75820442447', '64065821923-83179322010-08568364668-73745057832-25089710423')`:
# cat sysbench_2_a.out | grep 65666863675-
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;63건은 client 가 fail을 받은 건이다.&lt;/li&gt;
  &lt;li&gt;여전히 client가 commit을 받지 않은 데이터가 들어갈 수 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;user commit return 보다 engine commit이 먼저니까..&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;which data is correct?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../uploads/crash_recovery_data2.png&quot; alt=&quot;crash_recovery_data2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;다시한번-복습&quot;&gt;다시한번 복습&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;innodb 2 phase commit
    &lt;ol&gt;
      &lt;li&gt;engine prepare&lt;/li&gt;
      &lt;li&gt;binlog commit&lt;/li&gt;
      &lt;li&gt;engine commit&lt;/li&gt;
      &lt;li&gt;commit return&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;crash날때, 2-3 사이, 3-4 사이에 있던 transaction은 client가 commit을 제대로 받지 못했는데, DB에 존재하게된다.&lt;/li&gt;
  &lt;li&gt;이를 이해하지 못하거나, 무시하고 replication 구성을 사용한다면, 나중에 데이터가 깨져도 모른다…
    &lt;ul&gt;
      &lt;li&gt;HA 구성을 사용하는 환경에서 slave 중 하나를 master 로 failover시켜서 서비스한다고 해보자.
        &lt;ul&gt;
          &lt;li&gt;crashed old master 를 복구시켰는데 여기에 지금의 master에는 없는 데이터가 있다는 의미다.&lt;/li&gt;
          &lt;li&gt;recovered master를 그대로 new master의 slave 로 붙이면 데이터가 dup날 것이다.&lt;/li&gt;
          &lt;li&gt;안나면 더 심각하다. 그냥 데이터가 틀어져버린다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;여기에 master-standby master의 구성으로 recovered master의 데이터를 new master가 다시 복제해갔다고 생각해보자.
        &lt;ul&gt;
          &lt;li&gt;두대 구성이면 recovered data까지 복구된채로 서비스할 수도 있다.&lt;/li&gt;
          &lt;li&gt;하지만 다른 slaves 들이 있다면? 다른 slaves는 이 데이터를 가져갈 수가 없다. 점점 더 데이터는 틀어질 것이다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;HA solution 에 따라서 복구에 따른 대응방안을 다시한번 생각해봐야할 때이다.&lt;/li&gt;
  &lt;li&gt;특히 crash master를 복구했다고 무심코 원래 replication set에 넣어버리는 경우가 많은데, 매우 주의해야한다.&lt;/li&gt;
  &lt;li&gt;binlog를 최대한 수집해서 new master에 적용시켜주거나..(like MHA)&lt;/li&gt;
  &lt;li&gt;failover하게 되었다면, crashed old master는 그냥 붙일 생각말고 재구성하거나..&lt;/li&gt;
  &lt;li&gt;잘 대책을 세워보도록 하자.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>MIN KIM</name><email>fabmichaela@gmail.com</email></author><category term="MySQL" /><summary type="html">Crash recovery on MySQL</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">MySQL Add an AUTO_INCREMENT column to a partitioned table</title><link href="http://localhost:4000/blog/MySQL-Add-an-AUTO_INCREMENT-column-to-a-partitioned-table/" rel="alternate" type="text/html" title="MySQL Add an AUTO_INCREMENT column to a partitioned table" /><published>2018-08-29T00:00:00+09:00</published><updated>2018-08-29T00:00:00+09:00</updated><id>http://localhost:4000/blog/MySQL%20Add%20an%20AUTO_INCREMENT%20column%20to%20a%20partitioned%20table</id><content type="html" xml:base="http://localhost:4000/blog/MySQL-Add-an-AUTO_INCREMENT-column-to-a-partitioned-table/">&lt;h1 id=&quot;add-an-auto_increment-column-to-a-partitioned-table&quot;&gt;Add an AUTO_INCREMENT column to a partitioned table&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;사용중인 파티션테이블에 AI column을 추가하려고한다. 이때 AUTO_INCREMENT속성으로 add column, ALGORITHM=INPLACE 하면 에러가 발생한다. 현상을 살펴보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mysql-partitioned-table-without-auto_increment-column&quot;&gt;MySQL partitioned table without AUTO_INCREMENT column&lt;/h2&gt;
&lt;h2 id=&quot;creating-a-test-table&quot;&gt;Creating a test table&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE `aitest` (
  `no` int(11) NOT NULL,
  `name` varchar(10) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`no`,`created_at`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4
PARTITION BY RANGE (unix_timestamp(created_at))
(PARTITION p20180601 VALUES LESS THAN (1530370800) ENGINE = InnoDB,
 PARTITION p20180701 VALUES LESS THAN (1533049200) ENGINE = InnoDB,
 PARTITION p20180801 VALUES LESS THAN (1535727600) ENGINE = InnoDB,
 PARTITION p20180901 VALUES LESS THAN (1538319600 ) ENGINE = InnoDB);


insert into aitest values(100,'a','2018-06-01');
insert into aitest values(200,'b','2018-07-01');
insert into aitest values(300,'c','2018-08-01');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;add-ai-column&quot;&gt;Add AI column&lt;/h2&gt;
&lt;h3 id=&quot;add-ai-column-with-algorithminplace&quot;&gt;Add AI column with ALGORITHM=INPLACE&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AI column을 add 하는 것은 LOCK=NONE으로 안되고, AI column은 PK이거나 UK여야한다. PK는 기존에 쓰고 있는 것이 있으니 UK로 선언한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alter table `aitest`
add column `seq` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, add unique key seq_uk(seq, created_at), ALGORITHM=INPLACE, LOCK=SHARED;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;dont-panic-you-will-see-this---&quot;&gt;Don’t panic, you will see this -.-.&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:test 18:10:36&amp;gt;select * from aitest;
+-----+------+---------------------+-----+
| no  | name | created_at          | seq |
+-----+------+---------------------+-----+
| 100 | a    | 2018-06-01 00:00:00 |   1 |
| 200 | b    | 2018-07-01 00:00:00 |   1 |
| 300 | c    | 2018-08-01 00:00:00 |   1 |
+-----+------+---------------------+-----+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;왜이럴까. T.T 분명 partitioned table에서도 AI컬럼 썼었는데, sequential하게 증가했었는데,…&lt;/li&gt;
  &lt;li&gt;add column하면 각 partition에 초기값부터 넣게 되는 것 같은데.&lt;/li&gt;
  &lt;li&gt;drop 한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alter table `aitest`
drop column `seq` , drop index seq_uk, ALGORITHM=INPLACE, LOCK=NONE;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;add-ai-column-with-algorithmcopy&quot;&gt;Add AI column with ALGORITHM=COPY&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;column을 먼저 만들고 AI 속성을 변경시킨다. FYI, 속성변경은 ALGORITHM=COPY.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alter table `aitest`
add column `seq` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, add unique key seq_uk(seq, created_at), ALGORITHM=COPY, LOCK=SHARED;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;yes-it-works&quot;&gt;YES, it works!&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:test 18:20:24&amp;gt;select * from aitest;
+-----+------+---------------------+-----+
| no  | name | created_at          | seq |
+-----+------+---------------------+-----+
| 100 | a    | 2018-06-01 00:00:00 |   1 |
| 200 | b    | 2018-07-01 00:00:00 |   2 |
| 300 | c    | 2018-08-01 00:00:00 |   3 |
+-----+------+---------------------+-----+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;bug-related-to-algorithm&quot;&gt;Bug related to ALGORITHM&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;ALGORITHM에 따라서 다르게 동작한다. Bug로 등록함. https://bugs.mysql.com/bug.php?id=92241&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ALGORITHM=COPY&lt;/strong&gt;로 사용해야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alter table `aitest`
add column `seq` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, add unique key seq_uk(seq, created_at), ALGORITHM=COPY, LOCK=SHARED;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AUTO_INCREMENT column을 Partitioned table에 추가할때에 ALGORITHM=COPY를 사용한다!!!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>MIN KIM</name><email>fabmichaela@gmail.com</email></author><category term="MySQL" /><summary type="html">Add an AUTO_INCREMENT column to a partitioned table 사용중인 파티션테이블에 AI column을 추가하려고한다. 이때 AUTO_INCREMENT속성으로 add column, ALGORITHM=INPLACE 하면 에러가 발생한다. 현상을 살펴보자.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">MySQL Fractional timestamp and Partition pruning</title><link href="http://localhost:4000/blog/MySQL-Fractional-timestamp-and-Partition-pruning/" rel="alternate" type="text/html" title="MySQL Fractional timestamp and Partition pruning" /><published>2018-07-18T00:00:00+09:00</published><updated>2018-07-18T00:00:00+09:00</updated><id>http://localhost:4000/blog/MySQL%20Fractional%20timestamp%20and%20Partition%20pruning</id><content type="html" xml:base="http://localhost:4000/blog/MySQL-Fractional-timestamp-and-Partition-pruning/">&lt;h1 id=&quot;mysql-fractional-timestamp-and-partition-pruning&quot;&gt;MySQL Fractional timestamp and Partition pruning&lt;/h1&gt;

&lt;h2 id=&quot;mysql-fractional-timestamp&quot;&gt;MySQL Fractional timestamp&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;timestamp 를 milliseconds 혹은 microseconds까지 저장하기 위해서 fractional part 를 명시할 수 있다.&lt;/li&gt;
  &lt;li&gt;Reference : https://dev.mysql.com/doc/refman/5.7/en/fractional-seconds.html&lt;/li&gt;
  &lt;li&gt;timestamp(3): 3자리 fractional part를 저장한다. milliseconds(ms)&lt;/li&gt;
  &lt;li&gt;timestamp(6): 6자리 fractional part를 저장한다. microseconds(µs)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-table-with-timestamp3&quot;&gt;test table with timestamp(3)&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 11:17:56&amp;gt;show create table test.atest\G
*************************** 1. row ***************************
       Table: atest
Create Table: CREATE TABLE `atest` (
  `no` bigint(20) NOT NULL AUTO_INCREMENT,
  `a_no` bigint(20) NOT NULL,
  `created_at` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
  PRIMARY KEY (`no`,`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
1 row in set (0.00 sec)


root@localhost:test 13:58:20&amp;gt;select * from atest;
+----+------+-------------------------+
| no | a_no | created_at              |
+----+------+-------------------------+
|  1 |    1 | 2018-06-04 09:56:35.931 |
|  2 |    2 | 2018-06-04 09:56:35.931 |
|  3 |    3 | 2018-06-04 09:56:35.931 |
|  4 |    4 | 2018-06-04 09:56:35.931 |
+----+------+-------------------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;partitoining-with-fractional-timestamp&quot;&gt;Partitoining with fractional timestamp&lt;/h2&gt;
&lt;h3 id=&quot;try-to-alter-partition-table&quot;&gt;try to alter partition table&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alter table atest
PARTITION BY RANGE (unix_timestamp(created_at))
(PARTITION p20180601 VALUES LESS THAN (1530370800) ENGINE = InnoDB,
PARTITION p20180701 VALUES LESS THAN (1533049200) ENGINE = InnoDB);

ERROR 1491 (HY000): The PARTITION function returns the wrong type
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;안된다..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;wrong-type이라니-확인해보자&quot;&gt;wrong type이라니, 확인해보자.&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:test 15:19:25&amp;gt;select now(3),unix_timestamp(now(3));
+-------------------------+------------------------+
| now(3)                  | unix_timestamp(now(3)) |
+-------------------------+------------------------+
| 2018-07-18 15:19:32.469 |         1531894772.469 |
+-------------------------+------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떻게 하면 fractional timestamp기준으로 partitioning할 수 있을까.
정답: 소수점 떼기, FLOOR!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;floorunix_timestmpyour_partitioning_key&quot;&gt;FLOOR(UNIX_TIMESTMP(your_partitioning_key))&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alter table atest
PARTITION BY RANGE (floor(unix_timestamp(created_at)))
(PARTITION p20180601 VALUES LESS THAN (1530370800) ENGINE = InnoDB,
PARTITION p20180701 VALUES LESS THAN (1533049200) ENGINE = InnoDB);

root@localhost:test 15:41:07&amp;gt;show create table atest\G
*************************** 1. row ***************************
       Table: atest
Create Table: CREATE TABLE `atest` (
  `no` bigint(20) NOT NULL AUTO_INCREMENT,
  `a_no` bigint(20) NOT NULL,
  `created_at` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
  PRIMARY KEY (`no`,`created_at`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4
/*!50100 PARTITION BY RANGE (floor(unix_timestamp(created_at)))
(PARTITION p20180601 VALUES LESS THAN (1530370800) ENGINE = InnoDB,
 PARTITION p20180701 VALUES LESS THAN (1533049200) ENGINE = InnoDB) */
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;unfortunately-partition-pruning-is-not-working-well&quot;&gt;UNFORTUNATELY, Partition pruning is not working well&lt;/h2&gt;
&lt;h3 id=&quot;try-to-range-scan&quot;&gt;try to range scan&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:test 15:43:09&amp;gt;explain select * from atest where created_at between ('2018-06-01') and ('2018-06-10');
+----+-------------+-------+---------------------+------+---------------+------+---------+------+------+----------+-------------+
| id | select_type | table | partitions          | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+-------------+-------+---------------------+------+---------------+------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | atest | p20180601,p20180701 | ALL  | NULL          | NULL | NULL    | NULL |    8 |    12.50 | Using where |
+----+-------------+-------+---------------------+------+---------------+------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;try-to-equal-scan&quot;&gt;try to equal scan&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:test 15:43:13&amp;gt;explain select * from atest where created_at ='2018-06-04 09:56:35.931';
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | atest | p20180601  | ALL  | NULL          | NULL | NULL    | NULL |    4 |    25.00 | Using where |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;BUG 였음. FLOOR(decimal)의 partitioning expression으로 되어있지만, pruning에 제약이 있음.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;인덱스를 타게 해야한다.&lt;/li&gt;
  &lt;li&gt;가능하다면, Partition selection을 강제한다.&lt;/li&gt;
  &lt;li&gt;빨리 bug fix 되길 바란다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>MIN KIM</name><email>fabmichaela@gmail.com</email></author><category term="MySQL" /><summary type="html">MySQL Fractional timestamp and Partition pruning</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">MySQL Read Committed vs. Repeatable Read</title><link href="http://localhost:4000/blog/MySQL-Read-committed-and-Repeatable-Read/" rel="alternate" type="text/html" title="MySQL Read Committed vs. Repeatable Read" /><published>2018-05-24T00:00:00+09:00</published><updated>2018-05-24T00:00:00+09:00</updated><id>http://localhost:4000/blog/MySQL%20Read%20committed%20and%20Repeatable%20Read</id><content type="html" xml:base="http://localhost:4000/blog/MySQL-Read-committed-and-Repeatable-Read/">&lt;h1 id=&quot;read-committed-vs-repeatable-read&quot;&gt;Read Committed vs. Repeatable Read&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;MySQL의 Isolation level은 전통적으로 Repeatable Read 를 default로 한다.&lt;/li&gt;
  &lt;li&gt;하지만 반드시 repeatable read가 필요한 경우에만 lock을 사용하고 그외에서는 committed 를 봐도 무방하다면, 다른 RDBMS와 같이 Read committed를 default Isolation level로 하는 건 어떨까.&lt;/li&gt;
  &lt;li&gt;막연하게 Read Committed가 lock contention이 더 줄고, 동시성에 더 좋을 것 같다.&lt;/li&gt;
  &lt;li&gt;그리고 Repeatable read 에서 long running query (혹은 슬프게도 transaction이 제대로 close되지 않아서)가 돌때 undo가 너무 많이 쌓여서 전체적으로 성능에 영향을 주는 상황도 회피할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sysbench-test-and-isolation-level&quot;&gt;Sysbench test and Isolation level&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/repeatable-read and read-committed graph.png&quot; alt=&quot;&quot; width=&quot;800px&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;첫번째 결과그래프가 뭔가 throughput이 더 좋다.&lt;/li&gt;
  &lt;li&gt;Lock wait은 두번째가 더 적다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Isolation level만 변경한 것이다. 무엇이 Read Committed이고, 무엇이  Repeatable Read일까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;첫번째가 Repeatable read이고, 두번째가 Read Committed의 결과이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basically&quot;&gt;Basically,&lt;/h3&gt;
&lt;p&gt;트랜잭션 특성에 따라 결과는 다를 것이다.
이 테스트의 sysbench transaction은 간단한 update, delete, insert 하나씩 수행하게 되어있었다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;begin;
 update ..;
 update ..;
 delete ..;
 insert ..;
commit;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-makes-a-difference-in-throughput&quot;&gt;What makes a difference in throughput?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;정답은 ReadView 이다.&lt;/li&gt;
  &lt;li&gt;Reference: http://dimitrik.free.fr/blog/archives/2015/02/mysql-performance-impact-of-innodb-transaction-isolation-modes-in-mysql-57.html
    &lt;ul&gt;
      &lt;li&gt;MySQL InnoDB의 transaction isolation / MVCC 은 ReadViews를 기반으로 동작한다.&lt;/li&gt;
      &lt;li&gt;repeatable read는 transaction 시작할때 한번 readview 를 만든다.&lt;/li&gt;
      &lt;li&gt;read-committed는 매 문장마다, 여기서는 4번, readview를 생성한다.&lt;/li&gt;
      &lt;li&gt;Readview를 생성할때 mutex경합으로 인해 read-committed의 throughput이 줄어드는 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;어디까지나 Max throughput의 문제이다.&lt;/li&gt;
  &lt;li&gt;일반적으로 3k TPS까지 쓸것인가. repeatable read로 인한 문제점이 더 자주 노출될 수도 있다.&lt;/li&gt;
  &lt;li&gt;결과는 언제나 그렇듯 당신의 서비스 트랜잭션에 맞게….&lt;/li&gt;
&lt;/ul&gt;</content><author><name>MIN KIM</name><email>fabmichaela@gmail.com</email></author><category term="MySQL" /><summary type="html">Read Committed vs. Repeatable Read MySQL의 Isolation level은 전통적으로 Repeatable Read 를 default로 한다. 하지만 반드시 repeatable read가 필요한 경우에만 lock을 사용하고 그외에서는 committed 를 봐도 무방하다면, 다른 RDBMS와 같이 Read committed를 default Isolation level로 하는 건 어떨까. 막연하게 Read Committed가 lock contention이 더 줄고, 동시성에 더 좋을 것 같다. 그리고 Repeatable read 에서 long running query (혹은 슬프게도 transaction이 제대로 close되지 않아서)가 돌때 undo가 너무 많이 쌓여서 전체적으로 성능에 영향을 주는 상황도 회피할 수 있다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">MTS considerations</title><link href="http://localhost:4000/blog/MTS-considerations/" rel="alternate" type="text/html" title="MTS considerations" /><published>2018-04-05T00:00:00+09:00</published><updated>2018-04-05T00:00:00+09:00</updated><id>http://localhost:4000/blog/MTS%20considerations</id><content type="html" xml:base="http://localhost:4000/blog/MTS-considerations/">&lt;h1 id=&quot;mts-considerations&quot;&gt;MTS considerations&lt;/h1&gt;
&lt;p&gt;Multi-threaded slave(MTS)를 통해서 slave delay를 줄일수 있을까.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;→ YES. https://mysqlhighavailability.com/multi-threaded-replication-performance-in-mysql-5-7/&lt;/li&gt;
  &lt;li&gt;실제로 slave delay가 발생하는 시스템에서 MTS on/off test결과 효과적인 것을 확인 할 수 있었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mts-on-57-how-to-use&quot;&gt;MTS on 5.7 how to use&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stop slave sql_thread;
set global SLAVE_PARALLEL_TYPE='LOGICAL_CLOCK';
set global SLAVE_PARALLEL_WORKERS=8;
start slave sql_thread;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;mts-known-issues&quot;&gt;MTS known issues&lt;/h2&gt;
&lt;p&gt;서비스에서 사용하기 전에 지금 알려진 이슈가 있는지, 안정적인 버전이 어떤 것인지 확인해보자.&lt;/p&gt;

&lt;h3 id=&quot;backup&quot;&gt;Backup&lt;/h3&gt;
&lt;p&gt;Slave에서 backup을 수행하는 환경이라면, xtrabackup에는 제약이 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The –slave-info option requires GTID enabled for a multi-threaded slave.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gtid-and-mts&quot;&gt;GTID and MTS&lt;/h3&gt;
&lt;p&gt;GTID replication and parallel replication are independent&lt;/p&gt;

&lt;h3 id=&quot;other-bugs&quot;&gt;Other Bugs&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;binlog_group_commit_sync_delay를 0이상으로 설정하는 경우, slave worker가 느려진다. (Bug #21420180)
    &lt;ul&gt;
      &lt;li&gt;→ Bug fixed in 5.7.18, set the binlog_group_commit_sync_delay to 0.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LOGICAL_CLOCK에서 worker가 hang되는 현상. FK validation의 gap lock때문이다. READ COMMITTED에서도 lock문제가 발생한다. (Bug #25082593)
    &lt;ul&gt;
      &lt;li&gt;→ Bug fixed in 5.7.18, set the slave to use READ COMMITTED transaction isolation level. 슬레이브는 READ COMMITTED로 사용할 것.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;relay log 가 rotate 될때 Seconds_Behind_Master값이 부정확한 값으로 나온다.(Bug #23532304)
    &lt;ul&gt;
      &lt;li&gt;→  Bug fixed in 5.7.18&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Large packet size 에러. (Bug #21280753, Bug #77406)
    &lt;ul&gt;
      &lt;li&gt;→ Bug fixed in 5.7.19&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;for-safe-replication-suggest-configuration-as-follows&quot;&gt;For safe replication, suggest configuration as follows&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transaction_isolation = READ-COMMITTED
binlog_format = ROW
binlog_group_commit_sync_delay = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>MIN KIM</name><email>fabmichaela@gmail.com</email></author><category term="MySQL" /><summary type="html">MTS considerations Multi-threaded slave(MTS)를 통해서 slave delay를 줄일수 있을까. → YES. https://mysqlhighavailability.com/multi-threaded-replication-performance-in-mysql-5-7/ 실제로 slave delay가 발생하는 시스템에서 MTS on/off test결과 효과적인 것을 확인 할 수 있었다.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">MySQL range partition VS range columns partition</title><link href="http://localhost:4000/blog/mysql-range-partition-vs-range-columns-partition/" rel="alternate" type="text/html" title="MySQL range partition VS range columns partition" /><published>2018-01-22T14:46:49+09:00</published><updated>2018-01-22T14:46:49+09:00</updated><id>http://localhost:4000/blog/mysql-range-partition-vs-range-columns-partition</id><content type="html" xml:base="http://localhost:4000/blog/mysql-range-partition-vs-range-columns-partition/">&lt;h1 id=&quot;mysql-range-partition-vs-range-columns-partition&quot;&gt;MySQL range partition VS range columns partition&lt;/h1&gt;

&lt;p&gt;날짜를 이용하여 파티션시, range 를 사용할 것인가? range colums 를 사용할 것인가?&lt;/p&gt;

&lt;h3 id=&quot;개요&quot;&gt;개요&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터가 커짐에 따라, mysql 에서도 partition 기능을 많이 사용하게 된다. 특히 날짜를 이용하여, partitioning 을 많이 진행하게 되는데 이는 “PARTITION BY RANGE (to_days(날짜형식컬럼))” 혹은 “ PARTITION BY RANGE COLUMNS(날짜형식컬럼))” 으로 진행될 수 있다. 이 두형식에 대해 알아보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;생성방법&quot;&gt;생성방법&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;RANGE PARTITONING
    &lt;ul&gt;
      &lt;li&gt;대부분의 MySQL DBA 들은 날짜를 이용하여 파티션시, range 를 자주 사용한다. 사용은 date 형 컬럼을 to_days 로 비교하여 사용될 수 있다. (Range 파티션은 값으로 int 형 데이터가 와야 하기 때문이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modifiedAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201801&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-02-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201802&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-03-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201803&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-04-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201804&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-05-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201805&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-06-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201806&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;than&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-07-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/partitioning-range.html&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/partitioning-range.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RANGE COLUMNS PARTITONING
    &lt;ul&gt;
      &lt;li&gt;파티션은 잘 모르는분들도 있겠지만, range partition 과 비슷하지만 복합 컬럼을 사용할 수 있다는 장점이 있다. 이는 열거된 컬럼들과 row 의 실제값과의 비교연산을 통해 partition 이 선택이 되는데, 날짜 형식컬럼을 partition key 로 지정하여 비교를 진행할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range_columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modifiedAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COLUMNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201801&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-02-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201802&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-03-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201803&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-04-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201804&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-05-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201805&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-06-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201806&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-07-01'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/partitioning-columns-range.html&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/partitioning-columns-range.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;장단점&quot;&gt;장단점&lt;/h3&gt;

&lt;h4 id=&quot;1-성능-관점에서&quot;&gt;1. 성능 관점에서&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 성능상에는 아주 미세하게 “RANGE (to_days(createdAt))” 가 빠르다. date 형 값을 to_days function 으로 int 로 바꾸어 지정된 partition 으로 들어갈 수 있도록 비교하는것이, date 형을 string 형으로 바꾼 후 string 형으로 비교하는것보다 미세하게 빠르기 때문이다. 물론 CPU 의 성능에 따라 다르겠지만, 위와같은 비교연산에 비해 나머지 연산들 (Data 를 변경하거나 SELECT 하는 연산들) 이 훨씬 더 많은 자원과 시간을 소모하기때문에 크게 문제가 되지는 않는다. 이는 큰 문제가 되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;성능을 측정하기 위해 mysqlslap 을 이용하여, 단순 TEST를 진행해보자. 천건씩 (limit 1000) insert 를 10개의 세션 (–concurrency=10) 에서 모두 1000 번 (–number-of-queries=1000, 세션당 100번) 을 실행한다. 이를 10번 진행해보고 (–iterations=10) 결과를 확인해보자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost msb_5_7_19]# cat bt.sh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;========================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Test for insert on range partition table&quot;&lt;/span&gt;
date
/MySQL_bianries/5.7.19/bin/mysqlslap  --concurrency&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 --create-schema&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; --iterations&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10  --number-of-queries&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000 --pre-query&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;truncate table test.pt_range;&quot;&lt;/span&gt; --query&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;insert into test.pt_range (some_data, createdAt, modifiedAt) select 'some_data',DATE_ADD(now(),INTERVAL round(rand() *150) DAY), now() from information_schema.tables a ,  information_schema.tables b limit 1000;&quot;&lt;/span&gt;  --socket&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/mysql_sandbox5719.sock -umsandbox -pmsandbox
date
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;========================================================&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Test for insert on range column partition table&quot;&lt;/span&gt;
date
/MySQL_bianries/5.7.19/bin/mysqlslap  --concurrency&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 --create-schema&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; --iterations&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10  --number-of-queries&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000 --pre-query&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;truncate table test.pt_range_columns;&quot;&lt;/span&gt; --query&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;insert into pt_range_columns (some_data, createdAt, modifiedAt) select 'some_data',DATE_ADD(now(),INTERVAL round(rand() *150) DAY), now() from information_schema.tables a ,  information_schema.tables b limit 1000;&quot;&lt;/span&gt;  --socket&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/mysql_sandbox5719.sock -umsandbox -pmsandbox
date
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;========================================================&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost msb_5_7_19]# ./bt.sh &amp;gt; x
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@localhost msb_5_7_19]# cat x
&lt;span class=&quot;o&quot;&gt;========================================================&lt;/span&gt;
Test &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;insert on range partition table
Sun Jan 14 06:50:06 EST 2018
Benchmark
        Average number of seconds to run all queries: 19.477 seconds
        Minimum number of seconds to run all queries: 18.528 seconds
        Maximum number of seconds to run all queries: 20.999 seconds
        Number of clients running queries: 10
        Average number of queries per client: 100

Sun Jan 14 06:53:23 EST 2018
&lt;span class=&quot;o&quot;&gt;========================================================&lt;/span&gt;
Test &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;insert on range column partition table
Sun Jan 14 06:53:23 EST 2018
Benchmark
        Average number of seconds to run all queries: 20.407 seconds
        Minimum number of seconds to run all queries: 18.257 seconds
        Maximum number of seconds to run all queries: 23.298 seconds
        Number of clients running queries: 10
        Average number of queries per client: 100

Sun Jan 14 06:56:49 EST 2018
&lt;span class=&quot;o&quot;&gt;========================================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;크게 차이는 없지만, range partition table 에 데이터를 넣는것 (평균 19.477 vs 20.407) 이 insert 단위 테스트에서는 조금 더 빠른 결과를 보여준다. (큰 차이는 없었다)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;조건을 통해 partition pruning 을 할 경우 (정확히는 여러달에 걸친 조건 ( between ‘2018-03-30’ and ‘2018-04-02’;)) , 의도치 않게 “RANGE (to_days(createdAt))” 에서 첫번째 partition 을 추가로 읽을 수 있다. 이는 여러달에 걸친 data 를 조회할때는 추가적인 scan (첫번째 partiton 에 대한 scan) 이 필요함으로 성능이 떨어진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msandbox&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-03-30 00:00:00'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-04-30 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+----------+-------------------------+-------+---------------+---------+---------+------+--------+----------+--------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extra&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+----------+-------------------------+-------+---------------+---------+---------+------+--------+----------+--------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201801&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p201803&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p201804&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;524254&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+----------+-------------------------+-------+---------------+---------+---------+------+--------+----------+--------------------------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;09&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- range partition 의 경우, createdAt between '2018-03-30 00:00:00' and '2018-04-30 00:00:00'; 시에 알 수 없는 p201801 에 대한 partition 을 scan 하게 된다.&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msandbox&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;explain&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range_columns&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2018-03-30 00:00:00'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt;  &lt;span class=&quot;s1&quot;&gt;'2018-04-30 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+------------------+-----------------+-------+---------------+---------+---------+------+--------+----------+--------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;possible_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;key&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extra&lt;/span&gt;                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+------------------+-----------------+-------+---------------+---------+---------+------+--------+----------+--------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SIMPLE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range_columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201803&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p201804&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;406717&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;----+-------------+------------------+-----------------+-------+---------------+---------+---------+------+--------+----------+--------------------------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- range columns partition 의 경우,  p201801 에 대한 partition 을 읽지 않는다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;이는 to_days 가 특정일짜에 대해서 null 을 return 할 수 있기때문에, null 이 저장된 첫번째 partition 을 읽어야 정확한 데이터를 추출해낼 수 있기 때문이다. 이는 bug 가 아닌 의도된 결과이다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를 들어, ‘2018-04-00 00:00:00’ 의 경우, 데이터는 들어갈 수 있지만 (sql_mode 에 따라 다르지만, NO_ZERO_IN_DATE 를 사용하지 않는 경우 들어갈 수 있다.) 해당 결과는 to_days function 에의해 null 로 return 되어 첫번째 partition 에 저장되기 때문이다.&lt;/p&gt;

&lt;p&gt;이를 createdAt between ‘2018-03-30 00:00:00’ and ‘2018-04-30 00:00:00’ 와 같은 조건으로 검색할 경우, ‘2018-04-00 00:00:00’ 도 맞는 조건임으로 뽑아내야 하며, 이를 위해 첫번째 partition이 검색되어야 한다.&lt;/p&gt;

&lt;p&gt;하지만, 일반적으로 createdAt between ‘2018-04-01 00:00:00’ and ‘2018-04-30 23:59:59’ 와 같이 한달을 기준으로 혹은 더 작은 단위로 사용될 경우, 첫번째 partition 은 검색되지 않는다.&lt;/p&gt;

&lt;p&gt;아래의 예제를 확인해보자.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msandbox&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-04-00 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--------------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-04-00 00:00:00'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--------------------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                           &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;--------------------------------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;-- NULL 이 return 된다. to_days 로 표현할 수 없는 값이기 때문이다.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msandbox&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifiedAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'some_data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2018-04-00 00:00:00'&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',now());
ERROR 1292 (22007): Incorrect datetime value: '&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' for column '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' at row 1

mysql [localhost] {msandbox} (test) &amp;gt; select @@session.sql_mode;
+-------------------------------------------------------------------------------------------------------------------------------------------+
| @@session.sql_mode                                                                                                                        |
+-------------------------------------------------------------------------------------------------------------------------------------------+
| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |
+-------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

    -- 해당 값으로 data 를 넣으면 5.7 에서는 error 가 발생한다. 그 이유는 5.7 의 default sql_mode 값으로 NO_ZERO_IN_DATE 값을 포함하기 때문이다.


mysql [localhost] {msandbox} (test) &amp;gt; SET SESSION sql_mode = sys.list_drop(@@session.sql_mode, '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NO_ZERO_IN_DATE&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;');
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql [localhost] {msandbox} (test) &amp;gt; select @@session.sql_mode;
+---------------------------------------------------------------------------------------------------------------------------+
| @@session.sql_mode                                                                                                        |
+---------------------------------------------------------------------------------------------------------------------------+
| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |
+---------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

    --  sys.list_drop() 을 이용하여, 해당 session 의 sql_mode 에서 NO_ZERO_IN_DATE 값을 제거하였다.


mysql [localhost] {msandbox} (test) &amp;gt; insert into pt_range (some_data, createdAt, modifiedAt) values ('&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',now());
Query OK, 1 row affected (0.01 sec)

    --  값이 잘 들어간다. 5.6 의 경우, sql_mode 의 default 값에 NO_ZERO_IN_DATE 가 존재하지 않음으로 위의 작업 없이도 테스트가 가능하다.


mysql [localhost] {msandbox} (test) &amp;gt; explain select * from pt_range where createdAt='&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';
+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |
+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
|  1 | SIMPLE      | pt_range | p201801    | ALL  | NULL          | NULL | NULL    | NULL | 107694 |    10.00 | Using where |
+----+-------------+----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
1 row in set, 1 warning (0.00 sec)

    --  실행계획을 range partition 의 경우,  partition pruning 시에 p201801 를 읽는것이 확인된다.


mysql [localhost] {msandbox} (test) &amp;gt; select * from pt_range where createdAt='&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';
+---------+-----------+----------------------------+----------------------------+
| id      | some_data | createdAt                  | modifiedAt                 |
+---------+-----------+----------------------------+----------------------------+
| 1002002 | some_data | 2018-04-00 00:00:00.000000 | 2018-01-14 07:09:52.000000 |
+---------+-----------+----------------------------+----------------------------+
1 row in set (0.09 sec)

    --  원하는값도 정상적으로 가져온다.


mysql [localhost] {msandbox} (test) &amp;gt; insert into pt_range_columns (some_data, createdAt, modifiedAt) values ('&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',now());
Query OK, 1 row affected (0.01 sec)

mysql [localhost] {msandbox} (test) &amp;gt; explain select * from pt_range_columns where createdAt='&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';
+----+-------------+------------------+------------+------+---------------+------+---------+------+--------+----------+-------------+
| id | select_type | table            | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |
+----+-------------+------------------+------------+------+---------------+------+---------+------+--------+----------+-------------+
|  1 | SIMPLE      | pt_range_columns | p201803    | ALL  | NULL          | NULL | NULL    | NULL | 206671 |    10.00 | Using where |
+----+-------------+------------------+------------+------+---------------+------+---------+------+--------+----------+-------------+
1 row in set, 1 warning (0.00 sec)

    --  실행계획을 range columns partition 의 경우, 기대한것처럼 partition pruning 시에 p201803 를 읽는것이 확인된다.


mysql [localhost] {msandbox} (test) &amp;gt; select * from pt_range_columns where createdAt='&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';
+---------+-----------+----------------------------+----------------------------+
| id      | some_data | createdAt                  | modifiedAt                 |
+---------+-----------+----------------------------+----------------------------+
| 1002278 | some_data | 2018-04-00 00:00:00.000000 | 2018-01-14 07:11:15.000000 |
+---------+-----------+----------------------------+----------------------------+
1 row in set (0.13 sec)

mysql [localhost] {msandbox} (test) &amp;gt; SET SESSION sql_mode = sys.list_add(@@session.sql_mode, '&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NO_ZERO_IN_DATE&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;');
Query OK, 0 rows affected (0.00 sec)

mysql [localhost] {msandbox} (test) &amp;gt; select @@session.sql_mode;
+-------------------------------------------------------------------------------------------------------------------------------------------+
| @@session.sql_mode                                                                                                                        |
+-------------------------------------------------------------------------------------------------------------------------------------------+
| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |
+-------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

    -- sys.list_add() 을 이용하여 다시 원래대로 세션의 sql_mode  값에 NO_ZERO_IN_DATE 를 추가할 수 있다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;이에대해 관련된 공식 문서와 버그는 아래와 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- http://bugs.mysql.com/bug.php?id=72383 (Pruning includes first partition when query range crosses month boundary)
- Bug 18621754 : PRUNING INCLUDES FIRST PARTITION WHEN QUERY RANGE CROSSES MONTH BOUNDARY


    Fixed in 5.1+, documented in the 5.1.69, 5.5.31, 5.6.11, and 5.7.1 changelogs


    A query on a table partitioned by range and using TO_DAYS() as a
    partitioing function always included the first partition of the
    table when pruning. This happened regardless of the range
    employed in the BETWEEN clause of such a query.

    - https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-31.html
    - https://dev.mysql.com/doc/relnotes/mysql/5.6/en/news-5-6-11.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;추가로, range columns 에서 pruning 이 정확히 안되는 버그가 있었지만, 이는 5-5-33 과 5-6-13 에서 fix 되었다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Bug 16447483 : PARTITION PRUNING IS NOT CORRECT FOR RANGE COLUMNS

    - https://dev.mysql.com/doc/relnotes/mysql/5.5/en/news-5-5-33.html
    - https://dev.mysql.com/doc/relnotes/mysql/5.6/en/news-5-6-13.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-가독성-및-관리관점에서&quot;&gt;2. 가독성 및 관리관점에서,&lt;/h4&gt;
&lt;p&gt;가독성 부분에서는 “PARTITION BY RANGE COLUMNS(createdAt)” 이 더 좋을 수 있다. show create table 등으로 확인할때 직관적으로 날짜를 확인하여 파티션구조를 확인할 수 있기 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*!50500 PARTITION BY RANGE  COLUMNS(createdAt)
(PARTITION p201801 VALUES LESS THAN ('2018-02-01') ENGINE = InnoDB,
 PARTITION p201802 VALUES LESS THAN ('2018-03-01') ENGINE = InnoDB,
 PARTITION p201803 VALUES LESS THAN ('2018-04-01') ENGINE = InnoDB,
 PARTITION p201804 VALUES LESS THAN ('2018-05-01') ENGINE = InnoDB,
 PARTITION p201805 VALUES LESS THAN ('2018-06-01') ENGINE = InnoDB,
 PARTITION p201806 VALUES LESS THAN ('2018-07-01') ENGINE = InnoDB) */&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;반면에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RANGE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;경우&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;시&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변환되어&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;737091&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;라는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;결과가&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;반환된다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가독성&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;부분에서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;많이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;떨어질뿐&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;아니라&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;향후&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;추가할때도&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATE_ADD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;737241&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;와&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;같이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;언제까지&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;추가했는지&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;알아내야한다&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*!50100 PARTITION BY RANGE (to_days(createdAt))
(PARTITION p201801 VALUES LESS THAN (737091) ENGINE = InnoDB,
 PARTITION p201802 VALUES LESS THAN (737119) ENGINE = InnoDB,
 PARTITION p201803 VALUES LESS THAN (737150) ENGINE = InnoDB,
 PARTITION p201804 VALUES LESS THAN (737180) ENGINE = InnoDB,
 PARTITION p201805 VALUES LESS THAN (737211) ENGINE = InnoDB,
 PARTITION p201806 VALUES LESS THAN (737241) ENGINE = InnoDB) */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;
&lt;p&gt;일반적으로, 달이 넘어가는 데이터를 조회하지 않는 경우, “PARTITION BY RANGE COLUMNS(createdAt)” 과 “PARTITION BY RANGE (to_days(createdAt))” 는 성능에 큰 영향을 주지 않는다.&lt;/p&gt;

&lt;p&gt;하지만, 달이 넘어가는 데이터를 조회하는 경우는 꼭 explain 을 확인해보자. 만약 첫번째 partition 이 데이터가 많은 경우, 이는 overhead 가 될 수 있다.&lt;/p&gt;

&lt;p&gt;또한 partition drop 시 invalid date 를 가진 data 가 의도치않게 날아가버릴 수도 있다. 예를 들면, 첫번째 partition 인 2월이전의 partition 을 drop 하고 싶었지만, ‘2018-04-00 00:00:00’ row 도 함께 삭제될 수 있다.&lt;/p&gt;

&lt;p&gt;RANGE partiton 을 꼭 써야만한다면, 아래와 같이 첫번째 partition 을 추가하는것이 좋다. 첫번째 partition 을 확인하더라도 첫번째 파티션에 저장된 유효하지 않은 데이터만 확인함으로 성능상 유리할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt_range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;some_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modifiedAt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createdAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INVALID_DATE_DATA&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201801&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;737091&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201802&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;737119&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201803&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;737150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201804&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;737180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201805&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;737211&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p201806&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LESS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;THAN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;737241&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>MIN CHO</name><email>makayal46@gmail.com</email></author><category term="MySQL" /><summary type="html">MySQL range partition VS range columns partition</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">MySQL sandbox 설치와 이용방법</title><link href="http://localhost:4000/blog/MySQL-sandbox-%EC%84%A4%EC%B9%98%EC%99%80-%EC%9D%B4%EC%9A%A9%EB%B0%A9%EB%B2%95/" rel="alternate" type="text/html" title="MySQL sandbox 설치와 이용방법" /><published>2018-01-22T00:00:00+09:00</published><updated>2018-01-22T00:00:00+09:00</updated><id>http://localhost:4000/blog/MySQL%20sandbox%20%EC%84%A4%EC%B9%98%EC%99%80%20%EC%9D%B4%EC%9A%A9%EB%B0%A9%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/blog/MySQL-sandbox-%EC%84%A4%EC%B9%98%EC%99%80-%EC%9D%B4%EC%9A%A9%EB%B0%A9%EB%B2%95/">&lt;h1 id=&quot;mysql-sandbox-설치와-이용방법&quot;&gt;MySQL sandbox 설치와 이용방법&lt;/h1&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MySQL 을 이용하여 여러 TEST 를 진행하는 경우, 설치 및 설정하는데 많은 시간이 소요된다. 이러한 수고를 줄이고자 MySQL sandbox (한국에는 놀이터에 없는것 같지만, 외국에는 모래를 가지고 뭔가를 만들고 부셔버리는 모래놀이장이 있는데 이것이 sandbox 라고 불린다) 라는것이 존재하고 아주 유용하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;해당 sandbox 를 이용하면 손쉽게 다음과 같은일을 진행할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;instance 통제&lt;/li&gt;
      &lt;li&gt;$HOME/sandboxes 에서 현재 설치된 모든 instance 들을 통제할 수 있다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;$HOME/sandboxes/msb_$version 혹은 $HOME/sandboxes/$rsandbox_mysql-$verstion 으로 들어가서 각 instance 를 개별적으로 통제할 수 있다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;instance 구성
        &lt;ul&gt;
          &lt;li&gt;single instance 구성&lt;/li&gt;
          &lt;li&gt;여러개의 single instance 구성&lt;/li&gt;
          &lt;li&gt;여러가지 replication 구성&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;자세한 사용법은 아래를 참고하자. &lt;a href=&quot;https://github.com/datacharmer/mysql-sandbox&quot;&gt;https://github.com/datacharmer/mysql-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;

&lt;p&gt;설치는 간단하다. 소스를 github 에서 받아 설치해주면 된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;아래의 명령어는 sandbox 를 설치하기 위한 명령어이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    shell# wget https://github.com/datacharmer/mysql-sandbox/archive/master.zip
    shell# unzip master.zip
    shell# cd mysql-sandbox-master
    shell# perl Makefile.PL

    shell# make
    shell# make test
    shell# make install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;log&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost sandbox]# wget https://github.com/datacharmer/mysql-sandbox/archive/master.zip
--2017-07-20 04:16:45--  https://github.com/datacharmer/mysql-sandbox/archive/master.zip
Resolving jp-proxy.jp.oracle.com (jp-proxy.jp.oracle.com)... 10.188.53.53
Connecting to jp-proxy.jp.oracle.com (jp-proxy.jp.oracle.com)|10.188.53.53|:80... connected.
Proxy request sent, awaiting response... 302 Found
Location: https://codeload.github.com/datacharmer/mysql-sandbox/zip/master [following]
--2017-07-20 04:16:46--  https://codeload.github.com/datacharmer/mysql-sandbox/zip/master
Connecting to jp-proxy.jp.oracle.com (jp-proxy.jp.oracle.com)|10.188.53.53|:80... connected.
Proxy request sent, awaiting response... 200 OK
Length: unspecified [application/zip]
Saving to: ‘master.zip’

    [  &amp;lt;=&amp;gt;                                                                                                                                   ] 167,877      414KB/s   in 0.4s   

2017-07-20 04:16:48 (414 KB/s) - ‘master.zip’ saved [167877]

[root@localhost sandbox]# ll
total 288
-rw-r--r--. 1 root root  167877 Jul 20 04:16 master.zip
drwxr-xr-x. 6  501 games    197 Jul 20 03:39 MySQL-Sandbox-3.0.66
-rw-r--r--. 1 root root  124076 Aug  8  2015 MySQL-Sandbox-3.0.66.tar.gz

[root@localhost sandbox]# unzip master.zip
Archive:  master.zip
a3d6e43f5c5f8baee3794c98a157ee0c8fe8a2a4
   creating: mysql-sandbox-master/
  inflating: mysql-sandbox-master/Changelog  
  inflating: mysql-sandbox-master/LICENSE  
  inflating: mysql-sandbox-master/MANIFEST  
  inflating: mysql-sandbox-master/Makefile.PL  
  inflating: mysql-sandbox-master/README.md  
   creating: mysql-sandbox-master/bin/
  inflating: mysql-sandbox-master/bin/deploy_to_remote_sandboxes.sh  
  inflating: mysql-sandbox-master/bin/low_level_make_sandbox  
  inflating: mysql-sandbox-master/bin/make_multiple_custom_sandbox  
  inflating: mysql-sandbox-master/bin/make_multiple_sandbox  
  inflating: mysql-sandbox-master/bin/make_replication_sandbox  
  inflating: mysql-sandbox-master/bin/make_sandbox  
  inflating: mysql-sandbox-master/bin/make_sandbox_from_installed  
  inflating: mysql-sandbox-master/bin/make_sandbox_from_source  
  inflating: mysql-sandbox-master/bin/make_sandbox_from_url  
  inflating: mysql-sandbox-master/bin/msandbox  
  inflating: mysql-sandbox-master/bin/msb  
  inflating: mysql-sandbox-master/bin/sbtool  
  inflating: mysql-sandbox-master/bin/test_sandbox  
   creating: mysql-sandbox-master/lib/
   creating: mysql-sandbox-master/lib/MySQL/
  inflating: mysql-sandbox-master/lib/MySQL/Sandbox.pm  
   creating: mysql-sandbox-master/lib/MySQL/Sandbox/
  inflating: mysql-sandbox-master/lib/MySQL/Sandbox/Recipes.pm  
  inflating: mysql-sandbox-master/lib/MySQL/Sandbox/Scripts.pm  
  inflating: mysql-sandbox-master/mkdist.sh  
  inflating: mysql-sandbox-master/repo_list.pl  
   creating: mysql-sandbox-master/t/
  inflating: mysql-sandbox-master/t/01_modules.t  
  inflating: mysql-sandbox-master/t/02_test_binaries.t  
  inflating: mysql-sandbox-master/t/03_test_sandbox.t  
  inflating: mysql-sandbox-master/t/04_test_sbtool.t  
  inflating: mysql-sandbox-master/t/05_test_smoke.t  
  inflating: mysql-sandbox-master/t/06_test_user_defined.t  
  inflating: mysql-sandbox-master/t/07_test_user_defined.t  
  inflating: mysql-sandbox-master/t/08_test_single_port_checking.t  
  inflating: mysql-sandbox-master/t/09_test_multiple_port_checking.t  
  inflating: mysql-sandbox-master/t/10_check_start_restart.t  
  inflating: mysql-sandbox-master/t/11_replication_parameters.t  
  inflating: mysql-sandbox-master/t/12_custom_user_pwd.t  
  inflating: mysql-sandbox-master/t/13_innodb_plugin_install.t  
  inflating: mysql-sandbox-master/t/14_semi_synch_plugin_install.t  
  inflating: mysql-sandbox-master/t/15_user_privileges.t  
  inflating: mysql-sandbox-master/t/16_replication_options.t  
  inflating: mysql-sandbox-master/t/17_replication_flow.t  
  inflating: mysql-sandbox-master/t/18_force_creation.t  
  inflating: mysql-sandbox-master/t/19_replication_gtid.t  
  inflating: mysql-sandbox-master/t/20_add_option.t  
  inflating: mysql-sandbox-master/t/21_replication_gtid_option.t  
  inflating: mysql-sandbox-master/t/22_init_exec_sql.t  
  inflating: mysql-sandbox-master/t/23_mysqlx_plugin.t  
  inflating: mysql-sandbox-master/t/24_dd_expose.t  
  inflating: mysql-sandbox-master/t/Test_Helper.pm  
  inflating: mysql-sandbox-master/t/add_option.sb.pl  
  inflating: mysql-sandbox-master/t/check_replication.sb  
  inflating: mysql-sandbox-master/t/check_single_server.sb  
  inflating: mysql-sandbox-master/t/custom_user_pwd.sb.pl  
  inflating: mysql-sandbox-master/t/dd_expose.sb.pl  
  inflating: mysql-sandbox-master/t/force.sb.pl  
  inflating: mysql-sandbox-master/t/group_port_checking.sb.pl  
  inflating: mysql-sandbox-master/t/init_exec_sql.sb.pl  
  inflating: mysql-sandbox-master/t/innodb_plugin_install.sb.pl  
  inflating: mysql-sandbox-master/t/mysqlx_plugin.sb.pl  
  inflating: mysql-sandbox-master/t/replication_flow.sh  
  inflating: mysql-sandbox-master/t/replication_gtid.sb.pl  
  inflating: mysql-sandbox-master/t/replication_options.sb.pl  
  inflating: mysql-sandbox-master/t/replication_parameters.sb.pl  
  inflating: mysql-sandbox-master/t/semi_synch_plugin_install.sb.pl  
  inflating: mysql-sandbox-master/t/single_port_checking.sb.pl  
  inflating: mysql-sandbox-master/t/start_restart_arguments.sb.pl  
  inflating: mysql-sandbox-master/t/test_init_exec.sh  
  inflating: mysql-sandbox-master/t/user_privileges.sb.pl  
  inflating: mysql-sandbox-master/test_all_latest.sh  
[root@localhost sandbox]# ll
total 288
-rw-r--r--. 1 root root  167877 Jul 20 04:16 master.zip
drwxr-xr-x. 6  501 games    197 Jul 20 03:39 MySQL-Sandbox-3.0.66
-rw-r--r--. 1 root root  124076 Aug  8  2015 MySQL-Sandbox-3.0.66.tar.gz
drwxr-xr-x. 5 root root     184 Jul 18 14:24 mysql-sandbox-master

[root@localhost sandbox]# cd mysql-sandbox-master

[root@localhost mysql-sandbox-master]# ll
total 120
drwxr-xr-x. 2 root root  4096 Jul 18 14:24 bin
-rw-r--r--. 1 root root 41076 Jul 18 14:24 Changelog
drwxr-xr-x. 3 root root    19 Jul 18 14:24 lib
-rw-r--r--. 1 root root 11358 Jul 18 14:24 LICENSE
-rw-r--r--. 1 root root  2927 Jul 18 14:24 Makefile.PL
-rw-r--r--. 1 root root  1498 Jul 18 14:24 MANIFEST
-rwxr-xr-x. 1 root root  1659 Jul 18 14:24 mkdist.sh
-rw-r--r--. 1 root root 33848 Jul 18 14:24 README.md
-rw-r--r--. 1 root root  1011 Jul 18 14:24 repo_list.pl
drwxr-xr-x. 2 root root  4096 Jul 18 14:24 t
-rwxr-xr-x. 1 root root   831 Jul 18 14:24 test_all_latest.sh


[root@localhost mysql-sandbox-master]# perl Makefile.PL 
Checking if your kit is complete...
Looks good
Writing Makefile for MySQL::Sandbox
[root@localhost mysql-sandbox-master]# make
cp lib/MySQL/Sandbox/Scripts.pm blib/lib/MySQL/Sandbox/Scripts.pm
cp lib/MySQL/Sandbox/Recipes.pm blib/lib/MySQL/Sandbox/Recipes.pm
cp repo_list.pl blib/lib/MySQL/repo_list.pl
cp lib/MySQL/Sandbox.pm blib/lib/MySQL/Sandbox.pm
cp bin/deploy_to_remote_sandboxes.sh blib/script/deploy_to_remote_sandboxes.sh
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/deploy_to_remote_sandboxes.sh
cp bin/msandbox blib/script/msandbox
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/msandbox
cp bin/make_replication_sandbox blib/script/make_replication_sandbox
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/make_replication_sandbox
cp bin/make_multiple_sandbox blib/script/make_multiple_sandbox
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/make_multiple_sandbox
cp bin/make_sandbox_from_url blib/script/make_sandbox_from_url
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/make_sandbox_from_url
cp bin/test_sandbox blib/script/test_sandbox
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/test_sandbox
cp bin/make_sandbox blib/script/make_sandbox
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/make_sandbox
cp bin/make_sandbox_from_installed blib/script/make_sandbox_from_installed
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/make_sandbox_from_installed
cp bin/low_level_make_sandbox blib/script/low_level_make_sandbox
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/low_level_make_sandbox
cp bin/msb blib/script/msb
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/msb
cp bin/make_multiple_custom_sandbox blib/script/make_multiple_custom_sandbox
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/make_multiple_custom_sandbox
cp bin/sbtool blib/script/sbtool
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/sbtool
cp bin/make_sandbox_from_source blib/script/make_sandbox_from_source
/usr/bin/perl -MExtUtils::MY -e 'MY-&amp;amp;gt;fixin(shift)' -- blib/script/make_sandbox_from_source
Manifying blib/man3/MySQL::Sandbox::Scripts.3pm
Manifying blib/man3/MySQL::Sandbox::Recipes.3pm
Manifying blib/man3/MySQL::Sandbox.3pm

[root@localhost mysql-sandbox-master]# make test
PERL_DL_NONLAZY=1 /usr/bin/perl &quot;-MExtUtils::Command::MM&quot; &quot;-e&quot; &quot;test_harness(0, 'blib/lib', 'blib/arch')&quot; t/*.t
t/01_modules.t ...................... ok   
t/02_test_binaries.t ................ ok   
t/03_test_sandbox.t ................. ok   
t/04_test_sbtool.t .................. ok   
t/05_test_smoke.t ................... ok   
t/06_test_user_defined.t ............ ok   
t/07_test_user_defined.t ............ ok   
t/08_test_single_port_checking.t .... ok   
t/09_test_multiple_port_checking.t .. ok   
t/10_check_start_restart.t .......... ok   
t/11_replication_parameters.t ....... ok   
t/12_custom_user_pwd.t .............. ok   
t/13_innodb_plugin_install.t ........ ok   
t/14_semi_synch_plugin_install.t .... ok   
t/15_user_privileges.t .............. ok   
t/16_replication_options.t .......... ok   
t/17_replication_flow.t ............. ok   
t/18_force_creation.t ............... ok   
t/19_replication_gtid.t ............. ok   
t/20_add_option.t ................... ok   
t/21_replication_gtid_option.t ...... ok   
t/22_init_exec_sql.t ................ ok   
t/23_mysqlx_plugin.t ................ ok   
t/24_dd_expose.t .................... ok   
All tests successful.
Files=24, Tests=26,  1 wallclock secs ( 0.07 usr  0.02 sys +  0.75 cusr  0.09 csys =  0.93 CPU)
Result: PASS

[root@localhost mysql-sandbox-master]# make install
Installing /usr/local/share/perl5/MySQL/repo_list.pl
Installing /usr/local/share/perl5/MySQL/Sandbox.pm
Installing /usr/local/share/perl5/MySQL/Sandbox/Scripts.pm
Installing /usr/local/share/perl5/MySQL/Sandbox/Recipes.pm
Installing /usr/local/share/man/man3/MySQL::Sandbox::Scripts.3pm
Installing /usr/local/share/man/man3/MySQL::Sandbox::Recipes.3pm
Installing /usr/local/share/man/man3/MySQL::Sandbox.3pm
Installing /usr/local/bin/deploy_to_remote_sandboxes.sh
Installing /usr/local/bin/msandbox
Installing /usr/local/bin/make_replication_sandbox
Installing /usr/local/bin/make_multiple_sandbox
Installing /usr/local/bin/make_sandbox_from_url
Installing /usr/local/bin/test_sandbox
Installing /usr/local/bin/make_sandbox
Installing /usr/local/bin/make_sandbox_from_installed
Installing /usr/local/bin/low_level_make_sandbox
Installing /usr/local/bin/msb
Installing /usr/local/bin/make_multiple_custom_sandbox
Installing /usr/local/bin/sbtool
Installing /usr/local/bin/make_sandbox_from_source
Appending installation info to /usr/lib64/perl5/perllocal.pod
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mysql-binary-다운로드&quot;&gt;MySQL binary 다운로드&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;설치가 완료되었다면, 필요한 MySQL generic tar 본을 받도록 하자. (MySQL sandbox 는 해당 generic tar 에 대해 압축을 풀고 해당 binaries 를 이용하여 MySQL 을 구성한다.)&lt;/li&gt;
  &lt;li&gt;log&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost MySQL_bianries]# wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-linux-glibc2.5-x86_64.tar.gz
[root@localhost MySQL_bianries]# wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz
[root@localhost MySQL_bianries]# wget https://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.37-linux-glibc2.12-x86_64.tar.gz
[root@localhost MySQL_bianries]# wget https://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.57-linux-glibc2.12-x86_64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sandbox-로-설치&quot;&gt;SANDBOX 로 설치&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;sandbox 를 이용하여, MySQL 을 설치해보자. (SANDBOX 는 root 가 아닌 유저로 올리게 설정되어 있지만, 테스트 용도이니 “export SANDBOX_AS_ROOT=1” 를 통해 ROOT 로 사용할 수 있도록 설정할 수 있다.)&lt;/li&gt;
  &lt;li&gt;아래는 5.7.18 과 5.7.19 를 동시에 설치하는 예제이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost MySQL_bianries]# export SANDBOX_AS_ROOT=1
[root@localhost MySQL_bianries]# make_sandbox /MySQL_bianries/mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz 
.... sandbox server started

[root@localhost MySQL_bianries]# make_sandbox /MySQL_bianries/mysql-5.7.18-linux-glibc2.5-x86_64.tar.gz 
.... sandbox server started

unpacking /MySQL_bianries/mysql-5.7.18-linux-glibc2.5-x86_64.tar.gz


[root@localhost MySQL_bianries]# ps -ef | grep mysql
root     23972     1  0 04:02 pts/2    00:00:00 /bin/sh /MySQL_bianries/5.7.19/bin/mysqld_safe --defaults-file=/root/sandboxes/msb_5_7_19/my.sandbox.cnf
root     24171 23972  0 04:02 pts/2    00:00:01 /MySQL_bianries/5.7.19/bin/mysqld --defaults-file=/root/sandboxes/msb_5_7_19/my.sandbox.cnf --basedir=/MySQL_bianries/5.7.19 --datadir=/root/sandboxes/msb_5_7_19/data --plugin-dir=/MySQL_bianries/5.7.19/lib/plugin --user=root --log-error=msandbox.err --pid-file=/root/sandboxes/msb_5_7_19/data/mysql_sandbox5719.pid --socket=/tmp/mysql_sandbox5719.sock --port=5719
root     24444     1  0 04:25 pts/2    00:00:00 /bin/sh bin/mysqld_safe --defaults-file=/root/sandboxes/msb_5_7_18/my.sandbox.cnf
root     24629 24444  3 04:25 pts/2    00:00:00 /MySQL_bianries/5.7.18/bin/mysqld --defaults-file=/root/sandboxes/msb_5_7_18/my.sandbox.cnf --basedir=/MySQL_bianries/5.7.18 --datadir=/root/sandboxes/msb_5_7_18/data --plugin-dir=/MySQL_bianries/5.7.18/lib/plugin --user=root --log-error=/root/sandboxes/msb_5_7_18/data/msandbox.err --pid-file=/root/sandboxes/msb_5_7_18/data/mysql_sandbox5718.pid --socket=/tmp/mysql_sandbox5718.sock --port=5718
root     24682 23578  0 04:25 pts/2    00:00:00 grep --color=auto mysql



[root@localhost msb_5_7_18]# pwd
/root/sandboxes/msb_5_7_18


[root@localhost msb_5_7_18]# ./use
Welcome to the MySQL monitor.  Commands end with ; or g.
Your MySQL connection id is 5
Server version: 5.7.18 MySQL Community Server (GPL)

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or 'h' for help. Type 'c' to clear the current input statement.

mysql [localhost] {msandbox} ((none)) &amp;amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| test               |
+--------------------+
5 rows in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;아래는 5.7.19 이용하는 replication 을 구성을 진행하는 예제이다.
    &lt;ul&gt;
      &lt;li&gt;default 로 master 1대와 slave 2대로 구성되며, 이는 조절될 수 있다.&lt;/li&gt;
      &lt;li&gt;enable_gtid 이라는 스크립트를 통해, gtid 를 통한 replication 구성을 만들 수 있다.&lt;/li&gt;
      &lt;li&gt;위의 스크립트 외에도 initialize_slaves 혹은 check_slaves 로, 초기화 및 체크를 진행할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost sandboxes]# make_replication_sandbox /MySQL_bianries/mysql-5.7.19-linux-glibc2.12-x86_64.tar.gz 
installing and starting master
installing slave 1
installing slave 2
starting slave 1
... sandbox server started
starting slave 2
.... sandbox server started
initializing slave 1
initializing slave 2
replication directory installed in $HOME/sandboxes/rsandbox_mysql-5_7_19

[root@localhost rsandbox_mysql-5_7_19]# pwd
/root/sandboxes/rsandbox_mysql-5_7_19
[root@localhost rsandbox_mysql-5_7_19]# ./m
Welcome to the MySQL monitor.  Commands end with ; or g.
Your MySQL connection id is 7
Server version: 5.7.19-log MySQL Community Server (GPL)

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or 'h' for help. Type 'c' to clear the current input statement.

master [localhost] {msandbox} ((none)) &amp;amp;gt; show master status;
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |     4823 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)

master [localhost] {msandbox} ((none)) &amp;amp;gt; exit
Bye
[root@localhost rsandbox_mysql-5_7_19]# ./s1
Welcome to the MySQL monitor.  Commands end with ; or g.
Your MySQL connection id is 7
Server version: 5.7.19-log MySQL Community Server (GPL)

Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or 'h' for help. Type 'c' to clear the current input statement.

slave1 [localhost] {msandbox} ((none)) &amp;amp;gt; show slave statusG
    *************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
              Master_Host: 127.0.0.1
              Master_User: rsandbox
              Master_Port: 20594
            Connect_Retry: 60
              Master_Log_File: mysql-bin.000001
          Read_Master_Log_Pos: 4823
               Relay_Log_File: mysql-relay.000002
            Relay_Log_Pos: 5036
        Relay_Master_Log_File: mysql-bin.000001
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
           Replicate_Ignore_Table: 
          Replicate_Wild_Do_Table: 
      Replicate_Wild_Ignore_Table: 
               Last_Errno: 0
               Last_Error: 
             Skip_Counter: 0
          Exec_Master_Log_Pos: 4823
              Relay_Log_Space: 5239
              Until_Condition: None
               Until_Log_File: 
            Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
    Master_SSL_Verify_Server_Cert: No
            Last_IO_Errno: 0
            Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
      Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 1
              Master_UUID: 00020594-1111-1111-1111-111111111111
             Master_Info_File: /root/sandboxes/rsandbox_mysql-5_7_19/node1/data/master.info
                SQL_Delay: 0
          SQL_Remaining_Delay: NULL
          Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates
           Master_Retry_Count: 86400
              Master_Bind: 
          Last_IO_Error_Timestamp: 
         Last_SQL_Error_Timestamp: 
               Master_SSL_Crl: 
           Master_SSL_Crlpath: 
           Retrieved_Gtid_Set: 
            Executed_Gtid_Set: 
            Auto_Position: 0
         Replicate_Rewrite_DB: 
             Channel_Name: 
           Master_TLS_Version: 
    1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>MIN CHO</name><email>makayal46@gmail.com</email></author><category term="MySQL" /><summary type="html">MySQL sandbox 설치와 이용방법</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">Make my replication to the InnoDB Cluster</title><link href="http://localhost:4000/blog/make-my-replication-to-the-innodb-cluster/" rel="alternate" type="text/html" title="Make my replication to the InnoDB Cluster" /><published>2017-09-19T00:00:00+09:00</published><updated>2017-09-19T00:00:00+09:00</updated><id>http://localhost:4000/blog/make-my-replication-to-the-innodb-cluster</id><content type="html" xml:base="http://localhost:4000/blog/make-my-replication-to-the-innodb-cluster/">&lt;h1 id=&quot;make-my-replication-to-the-innodb-cluster&quot;&gt;Make my replication to the InnoDB Cluster&lt;/h1&gt;

&lt;p&gt;내 리플리케이션을 cluster로 관리해보자. 빈서버를 cluster로 구성하는 것도 유사한 스텝으로 작업한다. 데이터가 있는 경우라면, cluster생성시 첫 인스턴스를 master를 선택하면 된다. 이데이터가 seed가 되어 전체 클러스터에 복제되게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이번 테스트에서는 기존 5.7에 설치된 mixed replication으로 구성한 서버들을 활용한다.(server1,2,3) 기존의 replication 모두 절체. reset slave, reset master&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;innodb-cluster-requirements&quot;&gt;InnoDB cluster Requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;InnoDB cluster uses Group Replication and therefore your server instances must meet the same requirements. See Section 17.7.1, “Group Replication Requirements”. -&amp;gt; Requirements를 모두 만족하는지 확인한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In addition, the provisioning scripts that MySQL Shell uses to configure servers for use in InnoDB cluster require access to Python (2.7 and above). On Windows MySQL Shell includes Python and no user configuration is required. On Unix Python must be found as part of the environment. To check that your system has Python configured correctly issue: -&amp;gt; 그리고 python이 2.7 이상이 필요하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@all servers&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@server1:~]# git clone https://github.com/pyenv/pyenv.git ~/.pyenv
Initialized empty Git repository in /root/.pyenv/.git/
remote: Counting objects: 15428, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 15428 (delta 18), reused 31 (delta 10), pack-reused 15381
Receiving objects: 100% (15428/15428), 2.77 MiB | 820 KiB/s, done.
Resolving deltas: 100% (10543/10543), done.
[root@server1:~]# echo 'export PYENV_ROOT=&quot;$HOME/.pyenv&quot;' &amp;gt;&amp;gt; ~/.bash_profile
[root@server1:~]# echo 'export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bash_profile
[root@server1:~]# echo 'eval &quot;$(pyenv init -)&quot;' &amp;gt;&amp;gt; ~/.bash_profile
[root@server1:~]# pyenv versions
* system (set by /root/.pyenv/version)
[root@server1:~]# pyenv install 2.7.13
Downloading Python-2.7.13.tar.xz...
-&amp;gt; https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tar.xz
Installing Python-2.7.13...
Installed Python-2.7.13 to /root/.pyenv/versions/2.7.13

[root@server1:~]# python --version
Python 2.6.6
[root@server1:~]# pyenv versions
* system (set by /root/.pyenv/version)
  2.7.13
[root@server1:~]# cd /mysql

[root@server1:/mysql]# pyenv local 2.7.13
[root@server1:/mysql]# python --version
Python 2.7.13
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;methods-of-installing&quot;&gt;Methods of Installing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL Server 5.7.17 or higher. For details, see Chapter 2, Installing and Upgrading MySQL. -&amp;gt; ok&lt;/li&gt;
  &lt;li&gt;MySQL Shell 1.0.9 or higher. For details, see Section 19.3.1, “Installing MySQL Shell”.
    &lt;ul&gt;
      &lt;li&gt;Installing MySQL Shell from Direct Downloads from the MySQL Developer Zone&lt;/li&gt;
      &lt;li&gt;mysql-shell-1.0.10-linux-glibc2.12-x86-64bit.tar.gz 를 받아서 all servers에 업로드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL Router 2.1.3 or higher. For details, see Installation.
    &lt;ul&gt;
      &lt;li&gt;Download official MySQL packages: Downloads are available at http://dev.mysql.com/downloads/router.&lt;/li&gt;
      &lt;li&gt;mysql-router-2.1.4-linux-glibc2.12-x86-64bit.tar.gz 를 받아서 all servers에 업로드
@all servers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@server1:/mysql]# tar zxf mysql-shell-1.0.10-linux-glibc2.12-x86-64bit.tar.gz
[root@server1:/mysql]# tar zxf mysql-router-2.1.4-linux-glibc2.12-x86-64bit.tar.gz
cd /usr/local/bin
ln -s  /mysql/mysql-shell-1.0.10-linux-glibc2.12-x86-64bit/bin/mysqlsh /usr/local/bin/mysqlsh
ln -s  /mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit/bin/mysqlrouter /usr/local/bin/mysqlrouter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;production-deployment&quot;&gt;Production Deployment&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://dev.mysql.com/doc/refman/5.7/en/mysql-innodb-cluster-working-with-production-deployment.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-user&quot;&gt;Create user&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;instance 관리를 위한 user account가 필요하다. root일 필요는 없다. 하지만 많은 권한을 가져야한다. SUPER포함..
    &lt;ul&gt;
      &lt;li&gt;The user account used to administer an instance does not have to be the root account, however the user needs to be assigned full read and write privileges on the Metadata tables in addition to full MySQL administrator privileges (SUPER, GRANT OPTION, CREATE, DROP and so on). To give the user your_user the privileges needed to administer InnoDB cluster issue:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;grgr@ip 유저를 활용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;@all servers&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET SQL_LOG_BIN=0;
create user 'grgr'@'192.168.73.123' identified by 'grgr';

GRANT ALL PRIVILEGES ON mysql_innodb_cluster_metadata.* TO grgr@'192.168.73.123' WITH GRANT OPTION;
GRANT RELOAD, SHUTDOWN, PROCESS, FILE, SUPER, REPLICATION SLAVE, REPLICATION CLIENT, CREATE USER ON *.* TO grgr@'192.168.73.123' WITH GRANT OPTION;
GRANT SELECT ON performance_schema.* TO grgr@'192.168.73.123' WITH GRANT OPTION;
GRANT SELECT ON sys.* TO grgr@'192.168.73.123' WITH GRANT OPTION;
GRANT SELECT, INSERT, UPDATE, DELETE ON mysql.* TO grgr@'192.168.73.123' WITH GRANT OPTION;

create user 'grgr'@'192.168.81.192' identified by 'grgr';
GRANT ALL PRIVILEGES ON mysql_innodb_cluster_metadata.* TO grgr@'192.168.81.192' WITH GRANT OPTION;
GRANT RELOAD, SHUTDOWN, PROCESS, FILE, SUPER, REPLICATION SLAVE, REPLICATION CLIENT, CREATE USER ON *.* TO grgr@'192.168.81.192' WITH GRANT OPTION;
GRANT SELECT ON performance_schema.* TO grgr@'192.168.81.192' WITH GRANT OPTION;
GRANT SELECT ON sys.* TO grgr@'192.168.81.192' WITH GRANT OPTION;
GRANT SELECT, INSERT, UPDATE, DELETE ON mysql.* TO grgr@'192.168.81.192' WITH GRANT OPTION;
SET SQL_LOG_BIN=1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;위처럼 멤버의 모든 아이피를 넣어줘야하지만, 유연한 변경을 위해서 %를 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET SQL_LOG_BIN=0;
create user 'grgr'@'192.168.%' identified by 'grgr';
GRANT ALL PRIVILEGES ON mysql_innodb_cluster_metadata.* TO grgr@'192.168.%' WITH GRANT OPTION;
GRANT RELOAD, SHUTDOWN, PROCESS, FILE, SUPER, REPLICATION SLAVE, REPLICATION CLIENT, CREATE USER ON *.* TO grgr@'192.168.%' WITH GRANT OPTION;
GRANT SELECT ON performance_schema.* TO grgr@'192.168.%' WITH GRANT OPTION;
GRANT SELECT ON sys.* TO grgr@'192.168.%' WITH GRANT OPTION;
GRANT SELECT, INSERT, UPDATE, DELETE ON mysql.* TO grgr@'192.168.%' WITH GRANT OPTION;
SET SQL_LOG_BIN=1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;전체서버가 아직 클러스터 그룹이 되지 않은 상태이기 때문에, 모든 서버에 따로 변경을 가하는 경우에 SET SQL_LOG_BIN=0;을 잊지 않도록 한다. 나중에 dup에러를 만나지 않기 위해서. 물론 첫 구성이니 reset master로 해결할 수 있겠지만, 귀찮아지기 싫다면 SET SQL_LOG_BIN=0;로 작업한다. &amp;gt; 기존 사용하던 database가 추가되어있는 경우,&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Checking compliance of existing tables… FAIL
ERROR: 6 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같은 에러를 만날 수 있다. PK가 모두 존재하더라도.. 이건 user가 해당 데이터베이스에 권한이 없기 때문이었다. 만약 database가 사용자데이터베이스를 사용중이라면 권한을 추가해야한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;GRANT SELECT ON test.* TO grgr@'192.168.%' WITH GRANT OPTION;&lt;/code&gt; or 여러개라면, 그리고 귀찮다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;GRANT SELECT ON *.* TO grgr@'192.168.%' WITH GRANT OPTION;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;working-with-mysqlsh&quot;&gt;working with mysqlsh&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;When working with a production deployment it is a good idea to configure verbose logging for MySQL Shell initially. This is helpful in finding and resolving any issues that may arise when you are preparing the server to work as part of InnoDB cluster. To start MySQL Shell with a verbose logging level type: -&amp;gt; production에서 작업할때는 log-level을 높여서 작업하면 이슈를 찾기가 쉽다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shell&amp;gt; mysqlsh --log-level=DEBUG3&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The log file is located in ~/.mysqlsh/mysqlsh.log for Unix-based systems. On Microsoft Windows systems it is located in %APPDATA%\MySQL\mysqlsh\mysqlsh.log. See Section 18.5, “MySQL Shell Application Log”.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;checking-instance-state&quot;&gt;Checking Instance State&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;대상 인스턴스가 cluster에 추가할 수 있는 상태인지 먼저 확인한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;checking-instance-configuration&quot;&gt;Checking Instance Configuration&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@server1:~]# mysqlsh  --log-level=DEBUG3 --uri grgr@192.168.73.123:3306

mysql-js&amp;gt; dba.checkInstanceConfiguration('grgr@192.168.73.123:3306')
Please provide the password for 'grgr@192.168.73.123:3306':
Validating instance...

The instance '192.168.73.123:3306' is not valid for Cluster usage.

The following issues were encountered:

 - 2 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).
 - Some configuration options need to be fixed.

+----------------------------------+---------------+----------------+--------------------------------------------------+
| Variable                         | Current Value | Required Value | Note     |
+----------------------------------+---------------+----------------+--------------------------------------------------+
| binlog_checksum                  | CRC32         | NONE           | Update the server variable or restart the server |
| binlog_format                    | MIXED         | ROW            | Update the server variable or restart the server |
| enforce_gtid_consistency         | OFF           | ON             | Restart the server     |
| gtid_mode                        | OFF           | ON             | Restart the server     |
| log_slave_updates                | 0             | ON             | Restart the server     |
| master_info_repository           | FILE          | TABLE          | Restart the server     |
| relay_log_info_repository        | FILE          | TABLE          | Restart the server     |
| transaction_write_set_extraction | OFF           | XXHASH64       | Restart the server     |
+----------------------------------+---------------+----------------+--------------------------------------------------+


Please fix these issues, restart the server and try again.

{
    &quot;config_errors&quot;: [
        {
            &quot;action&quot;: &quot;server_update&quot;,
            &quot;current&quot;: &quot;CRC32&quot;,
            &quot;option&quot;: &quot;binlog_checksum&quot;,
            &quot;required&quot;: &quot;NONE&quot;
        },
        {
            &quot;action&quot;: &quot;server_update&quot;,
            &quot;current&quot;: &quot;MIXED&quot;,
            &quot;option&quot;: &quot;binlog_format&quot;,
            &quot;required&quot;: &quot;ROW&quot;
        },
        {
            &quot;action&quot;: &quot;restart&quot;,
            &quot;current&quot;: &quot;OFF&quot;,
            &quot;option&quot;: &quot;enforce_gtid_consistency&quot;,
            &quot;required&quot;: &quot;ON&quot;
        },
        {
            &quot;action&quot;: &quot;restart&quot;,
            &quot;current&quot;: &quot;OFF&quot;,
            &quot;option&quot;: &quot;gtid_mode&quot;,
            &quot;required&quot;: &quot;ON&quot;
        },
        {
            &quot;action&quot;: &quot;restart&quot;,
            &quot;current&quot;: &quot;0&quot;,
            &quot;option&quot;: &quot;log_slave_updates&quot;,
            &quot;required&quot;: &quot;ON&quot;
        },
        {
            &quot;action&quot;: &quot;restart&quot;,
            &quot;current&quot;: &quot;FILE&quot;,
            &quot;option&quot;: &quot;master_info_repository&quot;,
            &quot;required&quot;: &quot;TABLE&quot;
        },
        {
            &quot;action&quot;: &quot;restart&quot;,
            &quot;current&quot;: &quot;FILE&quot;,
            &quot;option&quot;: &quot;relay_log_info_repository&quot;,
            &quot;required&quot;: &quot;TABLE&quot;
        },
        {
            &quot;action&quot;: &quot;restart&quot;,
            &quot;current&quot;: &quot;OFF&quot;,
            &quot;option&quot;: &quot;transaction_write_set_extraction&quot;,
            &quot;required&quot;: &quot;XXHASH64&quot;
        }
    ],
    &quot;errors&quot;: [
        &quot;2 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).&quot;
    ],
    &quot;restart_required&quot;: true,
    &quot;status&quot;: &quot;error&quot;
}
=&amp;gt; my.cnf 변경하고 다시 시작.

mysql-js&amp;gt;  dba.checkInstanceConfiguration('grgr@192.168.73.123:3306')
Please provide the password for 'grgr@192.168.73.123:3306':
Validating instance...

The instance '192.168.73.123:3306' is not valid for Cluster usage.

The following issues were encountered:

 - 2 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).

Please fix these issues and try again.

{
    &quot;errors&quot;: [
        &quot;2 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).&quot;
    ],
    &quot;restart_required&quot;: false,
    &quot;status&quot;: &quot;error&quot;
}
mysql-js&amp;gt;
=&amp;gt; pk 없는 테이블은 추가해준다.

mysql-sql&amp;gt; \js
Switching to JavaScript mode...
mysql-js&amp;gt; dba.checkInstanceConfiguration('grgr@192.168.73.123:3306')
Please provide the password for 'grgr@192.168.73.123:3306':
Validating instance...

The instance '192.168.73.123:3306' is valid for Cluster usage
{
    &quot;status&quot;: &quot;ok&quot;
}
mysql-js&amp;gt;
=&amp;gt; status가 ok 라면 계속 진행한다.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;creating-the-cluster&quot;&gt;Creating the Cluster&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[root@server1:~]# mysqlsh --log-level=DEBUG3 --uri grgr@192.168.73.123:3306&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now create the cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql-js&amp;gt; var cluster = dba.createCluster('myCluster');
A new InnoDB cluster will be created on instance 'grgr@192.168.73.123:3306'.

Creating InnoDB cluster 'myCluster' on 'grgr@192.168.73.123:3306'...
Adding Seed Instance...

Cluster successfully created. Use Cluster.addInstance() to add MySQL instances.
At least 3 instances are needed for the cluster to be able to withstand up to
one server failure.

mysql-js&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;check the instance state:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql-js&amp;gt; cluster.checkInstanceState('grgr@192.168.73.123:3306')
Please provide the password for 'grgr@192.168.73.123:3306':
Analyzing the instance replication state...

The instance '192.168.73.123:3306' is valid for the cluster.
The instance is fully recoverable.

{
    &quot;reason&quot;: &quot;recoverable&quot;,
    &quot;state&quot;: &quot;ok&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Check the cluster status:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql-js&amp;gt; cluster.status()
{
    &quot;clusterName&quot;: &quot;myCluster&quot;,
    &quot;defaultReplicaSet&quot;: {
        &quot;name&quot;: &quot;default&quot;,
        &quot;primary&quot;: &quot;192.168.73.123:3306&quot;,
        &quot;status&quot;: &quot;OK_NO_TOLERANCE&quot;,
        &quot;statusText&quot;: &quot;Cluster is NOT tolerant to any failures.&quot;,
        &quot;topology&quot;: {
            &quot;192.168.73.123:3306&quot;: {
                &quot;address&quot;: &quot;192.168.73.123:3306&quot;,
                &quot;mode&quot;: &quot;R/W&quot;,
                &quot;readReplicas&quot;: {},
                &quot;role&quot;: &quot;HA&quot;,
                &quot;status&quot;: &quot;ONLINE&quot;
            }
        }
    }
}
mysql-js&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;adding-instances&quot;&gt;Adding instances&lt;/h4&gt;
&lt;p&gt;You need to add two more instances to the cluster to make it tolerant to a server failure.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@server1:~]#  mysqlsh  --log-level=DEBUG3 --uri grgr@192.168.73.123:3306

mysql-js&amp;gt; cluster=dba.getCluster();

mysql-js&amp;gt; cluster.status();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;다음과 같이 추가한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dba.checkInstanceConfiguration('grgr@192.168.81.192:3306')
cluster.addInstance(&quot;grgr@192.168.81.192:3306&quot;)
dba.checkInstanceConfiguration('grgr@192.168.85.198:3306')
cluster.addInstance(&quot;grgr@192.168.85.198:3306&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;logs&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Please provide the password for 'grgr@192.168.85.198:3306':
Validating instance...

The instance '192.168.85.198:3306' is valid for Cluster usage
{
    &quot;status&quot;: &quot;ok&quot;
}
mysql-js&amp;gt;
mysql-js&amp;gt; cluster.addInstance('grgr@192.168.85.198:3306')
A new instance will be added to the InnoDB cluster. Depending on the amount of
data on the cluster this might take from a few seconds to several hours.

Please provide the password for 'grgr@192.168.85.198:3306':
Adding instance to the cluster ...

Cluster.addInstance: WARNING: Not running locally on the server and can not access its error log.
ERROR:
Group Replication join failed.
ERROR: Error joining instance to cluster: '192.168.85.198:3306' - Query failed.3092 (HY000): The server is not configured properly to be an active member of the group. Please see more details on error log.. Query: START group_replication (RuntimeError)

mysql-js&amp;gt; cluster.addInstance(&quot;grgr@192.168.85.198:3306&quot;, {ipWhitelist: &quot;192.168.73.0/24,192.168.81.0/24,192.168.85.0/24&quot;})
A new instance will be added to the InnoDB cluster. Depending on the amount of
data on the cluster this might take from a few seconds to several hours.

Please provide the password for 'grgr@192.168.85.198:3306':
Adding instance to the cluster ...

The instance 'grgr@192.168.85.198:3306' was successfully added to the cluster.

mysql-js&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=&amp;gt; 잘 추가된다면 다행이지만..
역시 여러가지 에러케이스가 존재한다.
configuration다 변경했는지.
user를 잘 생성했는지.
PK를 다 추가했는지.
checkInstanceConfiguration에서 걸린 에러를 잘 확인하도록 한다.
정보가 부족하다면 dba.verbose = 1를 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;error-cases&quot;&gt;Error Cases&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;User권한 부족&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql-js&amp;gt; dba.verbose = 1
1
mysql-js&amp;gt; dba.checkInstanceConfiguration('grgr@192.168.81.192:3306')
Please provide the password for 'grgr@192.168.81.192:3306':
Validating instance...

=========================== MySQL Provision Output ===========================
Enter the password for server (grgr@192.168.81.192:3306):

Running check command.
Checking Group Replication prerequisites.
* Comparing options compatibility with Group Replication... PASS
Server configuration is compliant with the requirements.
* Checking server version... PASS
Server is 5.7.17

* Checking that server_id is unique... PASS
The server_id is valid.

* Checking compatibility of Multi-Threaded Slave settings... PASS
Multi-Threaded Slave settings are compatible with Group Replication.

* Checking compliance of existing tables... FAIL
ERROR: 6 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).
        PERCONA_SCHEMA.xtrabackup_history, test.events, test.t1, test.t2, test.tp, test_group_event_stats.event_user_actions

Group Replication requires tables to use InnoDB and have a PRIMARY KEY or PRIMARY KEY Equivalent (non-null unique key). Tables that do not follow these requirements will be readable but not updateable when used with Group Replication. If your applications make updates (INSERT, UPDATE or DELETE) to these tables, ensure they use the InnoDB storage engine and have a PRIMARY KEY or PRIMARY KEY Equivalent.
You can retry this command with the --allow-non-compatible-tables option if you'd like to enable Group Replication ignoring this warning.


ERROR: Error checking instance: The operation could not continue due to the following requirementsnot being met:
Non-compatible tables found in database.
==============================================================================
The instance '192.168.81.192:3306' is not valid for Cluster usage.

The following issues were encountered:

 - 6 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).

Please fix these issues and try again.

{
    &quot;errors&quot;: [
        &quot;6 table(s) do not have a Primary Key or Primary Key Equivalent (non-null unique key).&quot;
    ],
    &quot;restart_required&quot;: false,
    &quot;status&quot;: &quot;error&quot;
}
mysql-js&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;=&amp;gt; 추가된 데이터베이스에 권한이 없다. 권한을 부여
&lt;code class=&quot;highlighter-rouge&quot;&gt;GRANT SELECT ON *.* TO grgr@'192.168.73.123' WITH GRANT OPTION;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IP whitelist문제
    &lt;ul&gt;
      &lt;li&gt;addInstance에서 작업하다가 에러남. 이건 무엇인가 한참 해맸으나. IP 대역대 문제였음.&lt;/li&gt;
      &lt;li&gt;mysql error log를 함께 본다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-09-19T12:09:08.639569+09:00 0 [Warning] Plugin group_replication reported: '[GCS] Connection attempt from IP address 192.168.81.192 refused. Address is not in the IP whitelist.'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;=&amp;gt; 이런 에러를 발견했다면 whitelist문제일수 있다. group_replication_ip_whitelist= AUTOMATIC 이지만, C class를 벗어난 대역대 간의 통신에 대해서는 수동으로 추가해줄 필요가 있음. 물론 서로간에 방화벽이나 SElinux같은 것이 활성화 되지 않은 통신이 가능한 상태의 서버들간이어야함.&lt;/p&gt;

&lt;p&gt;@server1: group_replication_ip_whitelist를 설정한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@localhost:(none) 16:18:00&amp;gt;stop group_replication;

Query OK, 0 rows affected (35.04 sec)

set global group_replication_ip_whitelist = '192.168.73.0/24,192.168.81.0/24,192.168.85.0/24';

set global group_replication_ip_whitelist=AUTOMATIC;


root@localhost:(none) 16:18:43&amp;gt;start group_replication;
ERROR 3097 (HY000): The START GROUP_REPLICATION command failed as there was an error when joining the communication group.
=&amp;gt; 노드가 1개뿐이었던 상태이므로 조인할수 없다는 에러가 나온다. 이렇게 되면,
mysql-js&amp;gt; dba.rebootClusterFromCompleteOutage();
Reconfiguring the default cluster from complete outage...


The cluster was successfully rebooted.

&amp;lt;Cluster:myCluster&amp;gt;



 mysql-js&amp;gt; cluster.addInstance(&quot;grgr@192.168.81.192:3306&quot;);
 A new instance will be added to the InnoDB cluster. Depending on the amount of
 data on the cluster this might take from a few seconds to several hours.

 Please provide the password for 'grgr@192.168.81.192:3306':
 Adding instance to the cluster ...

 The instance 'grgr@192.168.81.192:3306' was successfully added to the cluster.
=&amp;gt; addInsatance 할때도 cluster.addInstance(“grgr@192.168.81.192:3306”, {ipWhitelist: “192.168.73.0/24,192.168.81.0/24,192.168.85.0/24”})와 같이 whitelist argument를 추가한다.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;gtid에러
    &lt;ul&gt;
      &lt;li&gt;addInstance에서 실패하면 mysqlsh 의 로그보다는 mysql error log를 보는 것에 좋다.&lt;/li&gt;
      &lt;li&gt;mysql error log를 함께 본다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2017-09-19T12:16:32.035765+09:00 0 [ERROR] Plugin group_replication reported: 'This member has more executed transactions than those present in the group. Local transactions: 998a1dbd-7b3c-11e7-a6c0-fa163ed51496:1 &amp;gt; Group transactions: 7f3e956c-98f7-11e7-84a4-fa163e110d6b:1-159,
b5eafd39-2316-11e7-88c5-fa163e110d6b:1-24'
=&amp;gt; 트랜잭션이 더 있었다? 지금은 설정하면서 발생한 트랜잭션일 가능성이 높으므로, reset master해버린다.

root@localhost:(none) 12:16:59&amp;gt;reset master;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;check-cluster-status&quot;&gt;Check cluster status&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@server1:~]#  mysqlsh  --log-level=DEBUG3 --uri grgr@192.168.73.123:3306

mysql-js&amp;gt; cluster=dba.getCluster();

mysql-js&amp;gt; cluster.status();
{
    &quot;clusterName&quot;: &quot;myCluster&quot;,
    &quot;defaultReplicaSet&quot;: {
        &quot;name&quot;: &quot;default&quot;,
        &quot;primary&quot;: &quot;192.168.73.123:3306&quot;,
        &quot;status&quot;: &quot;OK&quot;,
        &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;,
        &quot;topology&quot;: {
            &quot;192.168.73.123:3306&quot;: {
                &quot;address&quot;: &quot;192.168.73.123:3306&quot;,
                &quot;mode&quot;: &quot;R/W&quot;,
                &quot;readReplicas&quot;: {},
                &quot;role&quot;: &quot;HA&quot;,
                &quot;status&quot;: &quot;ONLINE&quot;
            },
            &quot;192.168.81.192:3306&quot;: {
                &quot;address&quot;: &quot;192.168.81.192:3306&quot;,
                &quot;mode&quot;: &quot;R/O&quot;,
                &quot;readReplicas&quot;: {},
                &quot;role&quot;: &quot;HA&quot;,
                &quot;status&quot;: &quot;ONLINE&quot;
            },
            &quot;192.168.85.198:3306&quot;: {
                &quot;address&quot;: &quot;192.168.85.198:3306&quot;,
                &quot;mode&quot;: &quot;R/O&quot;,
                &quot;readReplicas&quot;: {},
                &quot;role&quot;: &quot;HA&quot;,
                &quot;status&quot;: &quot;ONLINE&quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy-mysql-router&quot;&gt;Deploy MySQL Router&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@server1:~]# cd /mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit
[root@server1:/mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit]# cd bin
[root@server1:/mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit/bin]#

[root@server1:/mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit/bin]# mysqlrouter --bootstrap root@localhost:3306 --user=mysql
Please enter MySQL password for root:
WARNING: The MySQL server does not have SSL configured and metadata used by therouter may be transmitted unencrypted.

Bootstrapping system MySQL Router instance...
MySQL Router  has now been configured for the InnoDB cluster 'myCluster'.

The following connection information can be used to connect to the cluster.

Classic MySQL protocol connections to cluster 'myCluster':
- Read/Write Connections: localhost:6446
- Read/Only Connections: localhost:6447

X protocol connections to cluster 'myCluster':
- Read/Write Connections: localhost:64460
- Read/Only Connections: localhost:64470
[root@server1:/mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit/bin]#
[root@server1:/mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit/bin]# mysqlrouter &amp;amp;
[1] 3225
Connect using Mysql Router
Read/Write Connections: localhost:6446
[root@server1:/mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit/bin]# mysqlsh --uri test@localhost:6446
Creating a Session to 'test@localhost:6446'
Enter password:
Your MySQL connection id is 13101
Server version: 5.7.17-enterprise-commercial-advanced-log MySQL Enterprise Server - Advanced Edition (Commercial)
No default schema selected; type \use &amp;lt;schema&amp;gt; to set one.
MySQL Shell 1.0.10

Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type '\help' or '\?' for help; '\quit' to exit.

Currently in JavaScript mode. Use \sql to switch to SQL mode and execute queries.
mysql-js&amp;gt; \sql
Switching to SQL mode... Commands end with ;
mysql-sql&amp;gt; select @@hostname;
+-------------------------------+
| @@hostname                    |
+-------------------------------+
| server1 |
+-------------------------------+
1 row in set (0.00 sec)
mysql-sql&amp;gt; \q
Bye!
Read/Only Connections: localhost:6447
[root@server1:/mysql/mysql-router-2.1.4-linux-glibc2.12-x86-64bit/bin]# mysqlsh --uri test@localhost:6447
Creating a Session to 'test@localhost:6447'
Enter password:
Your MySQL connection id is 116
Server version: 5.7.17-log MySQL Community Server (GPL)
No default schema selected; type \use &amp;lt;schema&amp;gt; to set one.
MySQL Shell 1.0.10

Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type '\help' or '\?' for help; '\quit' to exit.

Currently in JavaScript mode. Use \sql to switch to SQL mode and execute queries.
mysql-js&amp;gt; \sql
Switching to SQL mode... Commands end with ;
mysql-sql&amp;gt; select @@hostname;
+-------------------------------+
| @@hostname                    |
+-------------------------------+
| server3 |
+-------------------------------+
1 row in set (0.00 sec)
mysql-sql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>MIN KIM</name><email>fabmichaela@gmail.com</email></author><category term="MySQL" /><summary type="html">Make my replication to the InnoDB Cluster</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">MySQL 통계정보</title><link href="http://localhost:4000/blog/MySQL-%ED%86%B5%EA%B3%84%EC%A0%95%EB%B3%B4/" rel="alternate" type="text/html" title="MySQL 통계정보" /><published>2017-04-02T00:00:00+09:00</published><updated>2017-04-02T00:00:00+09:00</updated><id>http://localhost:4000/blog/MySQL%20%ED%86%B5%EA%B3%84%EC%A0%95%EB%B3%B4</id><content type="html" xml:base="http://localhost:4000/blog/MySQL-%ED%86%B5%EA%B3%84%EC%A0%95%EB%B3%B4/">&lt;h1 id=&quot;mysql-통계정보&quot;&gt;MySQL 통계정보&lt;/h1&gt;

&lt;h1 id=&quot;mysql-55--51&quot;&gt;MySQL 5.5 , 5.1&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;각각 모든 index 에 대하여 innodb_stats_sample_pages 에 설정된 값만큼 sampling 하여 통계정보(cardinality) 를 구하여 memory 에 있는 dictionary 에 저장하게 된다..&lt;/li&gt;
  &lt;li&gt;기본적으로 아래와 같은 조건에서 통계정보가 생성되거나 기존의 정보에 업데이트된다. 해당 정보는 memory 에 존재하는 table dictionary 에 통계정보를 재생성하는데, 이는 memory 에 존재하기 때문에 해당 내용은 휘발성 데이터가 된다.
    &lt;ul&gt;
      &lt;li&gt;MySQL daemon이 시작되고 table 처음 오픈하거나 table cache 가 적어 table 을 닫고 다시 오픈되는 경우, 통계정보가 생성되며 이는 많은 resource 가 소비된다.&lt;/li&gt;
      &lt;li&gt;사용자가 analyze table 을 실행한 경우&lt;/li&gt;
      &lt;li&gt;마지막 통계정보 생성후 데이터의 1/16 (6.25%) 의 변경이 일어난 경우&lt;/li&gt;
      &lt;li&gt;innodb_stats_on_metadata 에 의한 업데이트&lt;/li&gt;
      &lt;li&gt;MySQL 5.5 , 5.1.32 이상에서는 innodb_stats_on_metadata 가 default 로 ON이었다. (https://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_stats_on_metadata)&lt;/li&gt;
      &lt;li&gt;이는 SHOW TABLE STATUS, SHOW INDEX 로 해당 테이블에 대한 정보를 조회하거나, INFORMATION_SCHEMA.TABLES 과 INFORMATION_SCHEMA.STATISTICS 를 확인하는 경우 자동으로 analyze table 이 실행되어 통계정보가 갱신된다.&lt;/li&gt;
      &lt;li&gt;이러한 이유로 SHOW TABLE STATUS 혹은 INFORMATION_SCHEMA.TABLES 를 조회하여 InnoDB tablespace 의 가용량을 계산하는 모니터링 스크립트가 주기적으로 실행된다면, 이는 많은 오버헤드가 필요한 작업이 될 수 있다. 바쁜서버의 경우, 장애의 포인트가 될 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하지만 innodb_stats_sample_pages 이 충분히 큰 값을 갖고 innodb_stats_on_metadata 을 통해 빈번한 통계정보 갱신으로 이루어진 경우, 오히려 optimiser 가 실행계획을 세우는데는 더욱 도움이 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mysql-56&quot;&gt;MySQL 5.6&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;5.5 에서처럼 innodb_stats_on_metadata=ON 으로 설정될 경우, 문제가 많이 발생하였다. 바쁜서버의 경우, 너무 자주 실행되는 SHOW 구문 혹은 스크립트에 의해 조회된 INFORMATION_SCHEMA.TABLES 에 (예를 들면, 테이블의 현재 가용공간을 가져오는 스크립트) 의해 MySQL 이 hang 상태에 접어드는 경우가 많았다. 이로써, 5.6.6 부터는 해당값의 default 값이 FALSE 로 변경되었다.
    &lt;ul&gt;
      &lt;li&gt;https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_stats_on_metadata&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL 5.6 에서는 새롭게 기본적으로 아래와 같은 조건에서 통계정보가 생성되거나 기존의 정보에 업데이트된다. innodb_stats_persistent 가 ON 인 경우 (default) 해당 정보는 memory 에 존재하는 table dictionary 에 통계정보를 재생성하며 해당 정보를 mysql.innodb_table_stats 과 mysql.innodb_index_stats 에 함께 저장한다.
    &lt;ul&gt;
      &lt;li&gt;이는 통계정보를 mysql.innodb_table_stats 과 mysql.innodb_index_stats 에 저장할지 아닐지에 대해 판단한다.&lt;/li&gt;
      &lt;li&gt;innodb_stats_persistent_sample_pages 는 innodb_stats_persistent 이 ON 이 되어 있는 경우, 어느정도의 index page 를 탐색하여 통계정보를 만들지 결정한다. (https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_stats_persistent)&lt;/li&gt;
      &lt;li&gt;innodb_stats_transient_sample_pages 는 5.5 에서 사용되었던 innodb_stats_sample_pages 의 이름이 바뀐것이다. innodb_stats_persistent 이 OFF 이 되어 있는 경우 (5.5 처럼 사용), 어느정도의 index page 를 탐색하여 통계정보를 만들지 결정한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;만약 MySQL 을 5.6 통계와 관련하여 default 설정으로 사용하는 경우, 아래와 같이 동작한다.
    &lt;ul&gt;
      &lt;li&gt;MySQL daemon이 시작되고 table 처음 오픈하거나 table cache 가 적어 table 을 닫고 다시 오픈되는 경우, 통계정보를 mysql.innodb_table_stats 과 mysql.innodb_index_stats 에서 가져온다.&lt;/li&gt;
      &lt;li&gt;사용자가 analyze table 을 실행한 경우&lt;/li&gt;
      &lt;li&gt;innodb_stats_persistent = ON 이라면, 마지막 통계정보 생성후 데이터의 1/10 (10%) 의 변경이 발생하게 된다면 갱신된다. OFF 라면 예전버젼과 같이 6.25% 가 변경되면 통계정보를 바꾼다. 이는 소스에 hard coding 되어 있다. ** innodb_stats_auto_recalc 에 의해 자동 통계 재조정이 조절된다. innodb_stats_auto_recalc 가 ON 이라면, 아래의 공식대로 수행되지만, OFF 라면 자동 통계 재조정은 하지 않는다. (https://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_stats_auto_recalc)
        &lt;ul&gt;
          &lt;li&gt;https://github.com/mysql/mysql-server/blob/23032807537d8dd8ee4ec1c4d40f0633cd4e12f9/storage/innobase/row/row0mysql.cc&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/***********************************//*
Updates the table modification counter and calculates new estimates
for table and index statistics if necessary. */
UNIV_INLINE
void
row_update_statistics_if_needed(
/*============================*/
 dict_table_t* table) /*!&amp;lt; in: table */
{
 ib_uint64_t counter;
 ib_uint64_t n_rows;

 if (!table-&amp;gt;stat_initialized) {
  DBUG_EXECUTE_IF(
   'test_upd_stats_if_needed_not_inited',
   fprintf(stderr, 'test_upd_stats_if_needed_not_inited'
    ' was executedn');
  );
  return;
 }

 counter = table-&amp;gt;stat_modified_counter++;
 n_rows = dict_table_get_n_rows(table);

 if (dict_stats_is_persistent_enabled(table)) {
  if (counter &amp;gt; n_rows / 10 /* 10% */
      &amp;amp;&amp;amp; dict_stats_auto_recalc_is_enabled(table)) {

   dict_stats_recalc_pool_add(table);
   table-&amp;gt;stat_modified_counter = 0;
  }
  return;
 }

 /* Calculate new statistics if 1 / 16 of table has been modified
 since the last time a statistics batch was run.
 We calculate statistics at most every 16th round, since we may have
 a counter table which is very small and updated very often. */

 if (counter &amp;gt; 16 + n_rows / 16 /* 6.25% */) {

  ut_ad(!mutex_own(&amp;amp;dict;_sys-&amp;gt;mutex));
  /* this will reset table-&amp;gt;stat_modified_counter to 0 */
  dict_stats_update(table, DICT_STATS_RECALC_TRANSIENT);
 }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Default 값 (innodb_stats_persistent=ON,innodb_stats_auto_recalc=ON,innodb_stats_persistent_sample_pages=20)으로 사용한다 하더라도, TABLE 을 만들때 해당 데이터 변화량에 의해 자동으로 통계정보가 수집될지 아닐지를 결정할 수 있다. (https://dev.mysql.com/doc/refman/5.6/en/create-table.html)
    &lt;ul&gt;
      &lt;li&gt;STATS_AUTO_RECALC 는 GLOBAL 한 innodb_stats_auto_recalc 과 관계없이 해당 테이블에 의존적으로 동작한다. (시간이 지남에 따라 자주 통계정보가 바뀌어 실행계획이 틀어지는 경우 해당 값을 OFF 시켜 해당 테이블에 대한 자동 통계정보를 갱신하지 않게 만들 수 있다.)&lt;/li&gt;
      &lt;li&gt;STATS_PERSISTENT 는 GLOBAL 한 innodb_stats_persistent 과 관계없이 해당 테이블에 의존적으로 동작한다. (특정 테이블의 경우, 통계정보를 자주 갱신해야 하는 경우, 해당값을 5.5 형태인 OFF 로 두어 SHOW 명령어등에 의해서도 자주 휘발성 통계정보를 만들 수 있다.)&lt;/li&gt;
      &lt;li&gt;STATS_SAMPLE_PAGES 는 GLOBAL 한 innodb_stats_persistent_sample_pages 과 관계없이 해당 테이블에 의존적으로 동작한다. (해당 옵션을 잘 조절하여, DATA 가 큰 경우에는 STATS_SAMPLE_PAGES 등을 크게 잡아 통계정보를 좀 더 세심하게 만들어줄 수 있다.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;참고 optimizer table 과 analyze table.
    &lt;ul&gt;
      &lt;li&gt;analyze table 은 지정된 만큼 인덱스의 데이터를 조회하여, 통계정보를 갱신한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>MIN CHO</name><email>makayal46@gmail.com</email></author><category term="MySQL" /><summary type="html">MySQL 통계정보</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry><entry><title type="html">Semi-Synchronous Replication on MySQL</title><link href="http://localhost:4000/blog/semi-synchronous-replication-on-mysql/" rel="alternate" type="text/html" title="Semi-Synchronous Replication on MySQL" /><published>2017-03-10T00:00:00+09:00</published><updated>2017-03-10T00:00:00+09:00</updated><id>http://localhost:4000/blog/semi-synchronous-replication-on-mysql</id><content type="html" xml:base="http://localhost:4000/blog/semi-synchronous-replication-on-mysql/">&lt;h1 id=&quot;semi-synchronous-replication-on-mysql&quot;&gt;Semi-Synchronous Replication on MySQL&lt;/h1&gt;

&lt;h2 id=&quot;loss-less-semi-synchronous-replication-on-mysql-572&quot;&gt;Loss-less Semi-Synchronous Replication on MySQL 5.7.2&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;5.7.2이전, 이후 semi-sync replication방식 비교&lt;/li&gt;
&lt;/ul&gt;

&lt;table class=&quot;relative-table wrapped confluenceTable&quot;&gt;&lt;colgroup&gt; &lt;col /&gt; &lt;col /&gt; &lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot;&gt;MySQL Version

rpl_semi_sync_master_wait_point

(introduced from 5.7)&lt;/th&gt;
&lt;th class=&quot;confluenceTh&quot;&gt;MySQL 5.5 and 5.6

AFTER_COMMIT(MySQL 5.7.2)&lt;/th&gt;
&lt;th class=&quot;confluenceTh&quot;&gt;MySQL 5.7.2

AFTER_SYNC(By default on MySQL 5.7.2)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot;&gt; Feature view&lt;/th&gt;
&lt;td class=&quot;confluenceTd&quot; width=&quot;50%&quot;&gt;
&lt;div class=&quot;content-wrapper&quot;&gt;

&lt;a href=&quot;/uploads/after_commit.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-927 size-full&quot; src=&quot;/uploads/after_commit.png&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;

&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; width=&quot;50%&quot;&gt;
&lt;div class=&quot;content-wrapper&quot;&gt;

&lt;a href=&quot;/uploads/after_sync.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-928 size-full&quot; src=&quot;/uploads/after_sync.png&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;

&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot; colspan=&quot;1&quot;&gt;Workflow&lt;/th&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;1. User transaction commit

2. Engine prepare

3. Binlog flush (writing to fscache)

4. Binlog commit (fsync if sync_binlog=1)

5-1. Engine commit (releasing row locks, changes are visible to other users)

5-2. Binlog dump thread send event with ACK Request

6. &lt;strong&gt;semisync wait (AFTER_COMMIT)&lt;/strong&gt;

7. User Commit OK&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;1. User transaction commit

2. Engine prepare

3. Binlog flush (writing to fscache)

4. Binlog commit (fsync if sync_binlog=1)

5. Binlog dump thread send event with ACK Request

6.&lt;strong&gt; loss-less semisync wait (AFTER_SYNC)&lt;/strong&gt;

7. Engine commit (releasing row locks, changes are visible to other users)

8. User Commit OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot; colspan=&quot;1&quot;&gt;Master crash&lt;/th&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;If master is crashed at step 6.
&lt;ul&gt;
 	&lt;li&gt;Master에 이미 Engine commit됨&lt;/li&gt;
 	&lt;li&gt;slave로 부터 ack를 기다리고 있는 중인데, 다른 세션은 해당 데이터를 읽을 수 있다.&lt;/li&gt;
 	&lt;li&gt;이 상태에서 master가 crash된다면, slave에는 해당 데이터가 없다. (Phantom Read)&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;If master is crashed at step 6.
&lt;ul&gt;
 	&lt;li&gt;Slave에서 ACK를 받지 못했다면, master에도 commit되지 않는다.&lt;/li&gt;
 	&lt;li&gt;Phantom Read가 일어나지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot; colspan=&quot;1&quot;&gt;Data Integrity - 1. Master에만 존재하고 Slave에 존재하지않는 데이터&lt;/th&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;
&lt;ul&gt;
 	&lt;li&gt;Possible&lt;/li&gt;
 	&lt;li&gt;slave에 replicated되지 않고 master에만 commit된 transaction을 manually rollback해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;
&lt;ul&gt;
 	&lt;li&gt;None&lt;/li&gt;
 	&lt;li&gt;slave에 replicated되지 않고 master에만 commit된 transaction은 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot; colspan=&quot;1&quot;&gt;Data Integrity - 2. Slave에만 존재하고 Master에 존재하지않는 데이터&lt;/th&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;
&lt;ul&gt;
 	&lt;li&gt;workflow단계 중 3, 4 단계에서 master가 crash된 경우, master의 binlog에는 쓰여지지 않았는데, slave에는 이미 데이터가 전송되었을 가능성이 있었다.&lt;/li&gt;
 	&lt;li&gt;→ 5.6.17이후 fix됨(3 단계에서 user session 이 binlog lock(LOCK_log)를 hold 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;1&quot;&gt;
&lt;div class=&quot;content-wrapper&quot;&gt;
&lt;ul&gt;
 	&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot; colspan=&quot;1&quot;&gt;Strong Durability설정에서 binlog와 redo log(ib_logfile)관계

1. sync_binlog=1

2. innodb_flush_log_at_trx_commit=1

3. innodb_support_xa=1&lt;/th&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;2&quot;&gt;
&lt;ul&gt;
 	&lt;li&gt;sync_binlog=1이라면, Binlog commit 단계에서 바로 file로 fsync한다.&lt;/li&gt;
 	&lt;li&gt;innodb_flush_log_at_trx_commit=1이라면, Engine commit단계에서 바로 redo log file 로 flush한다.&lt;/li&gt;
 	&lt;li&gt;binlog와 redo log의 synchronize를 manage하는 옵션이 innodb_support_xa=1이다. crash recovery시 redo log뿐 아니라 binary log까지 참조하여 transaction event를 recovery해준다.
&lt;ul&gt;
 	&lt;li&gt;세부 내용은 하단 참조.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;confluenceTh&quot; colspan=&quot;1&quot;&gt;Strong Durability설정에서 Crashed master recovery&lt;/th&gt;
&lt;td class=&quot;confluenceTd&quot; colspan=&quot;2&quot;&gt;
&lt;ul&gt;
 	&lt;li&gt;Binlog commit 후 Binlog dump가 slave IO thread에 binlog event를 전달한다. (binlog commit 완료)&lt;/li&gt;
 	&lt;li&gt;ACK 를 받지 않은 상태에서 master가 crash되었다면, slave에 데이터가 있을 수도 있고 없을 수도 있다.&lt;/li&gt;
 	&lt;li&gt;Master에는 binlog commit까지 된것이므로 recovery 시 데이터 복구 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;strong-durability&quot;&gt;Strong Durability&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;sync_binlog=1&lt;/li&gt;
  &lt;li&gt;innodb_flush_log_at_trx_commit=1&lt;/li&gt;
  &lt;li&gt;innodb_support_xa=1&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;distributed-transaction-processing-using-xa&quot;&gt;Distributed Transaction Processing Using XA&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;In version 5.0, the server uses XA internally to coordinate the binary log and the storage engines.&lt;/li&gt;
  &lt;li&gt;XA protocol을 사용한 트랜잭션에 대해서 2 phase commit을 지원하는 기능이지만, 내부적으로 MySQL은 이 기능을 사용해서 binary log와 storage engines의 commit 프로세스를 2 PC로 수행한다.
    &lt;ul&gt;
      &lt;li&gt;XA includes a transaction manager that coordinates a set of resource managers so that they commit a global transaction as an atomic unit. Each transaction is assigned a unique XID, which is used by the transaction manager and the resource managers. When used internally in the MySQL server, the transaction manager is usually the binary log and the resource managers are the storage engines.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-phase-commit&quot;&gt;2 Phase commit&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/msha_0408.png&quot; alt=&quot;&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Phase 1. Innodb prepare
    &lt;ul&gt;
      &lt;li&gt;Error : rollback&lt;/li&gt;
      &lt;li&gt;OK : Phase 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Before Phase 2. Binlog commit (XID 저장하고 있음)&lt;/li&gt;
  &lt;li&gt;Phase 2. InnoDB commit
    &lt;ul&gt;
      &lt;li&gt;이때 commit이 fail하는 일은 보통 일어나지 않는다. phase1에서 prepare를 했다는 이야기는 commit을 할 수 있다는 것을 확인한 것이다. 그러므로 fail했을때에 대한 로직이 없다.&lt;/li&gt;
      &lt;li&gt;하지만 여전히 HW fail은 발생할 수 있다. 다음의 Crash safety에서 recovery 단계를 살펴본다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After phase 2. XA cleanup. Binary log do nothing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;crash-safety&quot;&gt;Crash safety&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/uploads/msha_0409.png&quot; alt=&quot;&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;InnoDB crash recovery.
    &lt;ul&gt;
      &lt;li&gt;Phase 2의 InnoDB commit까지 일어났다면, 변경분이 redo에 정상적으로 저장되었으므로 recover된다.&lt;/li&gt;
      &lt;li&gt;InnoDB commit되기전, binlog에만 써진 변경사항이 존재할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The last binary log recovery.
    &lt;ul&gt;
      &lt;li&gt;마지막 binary log를 연다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Format_description&lt;/code&gt; event를 확인하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;binlog-in-use&lt;/code&gt; flag 를 확인한다. binlog를 쓰기 시작할때 binlog-in-use flag가 설정되고, 닫을 때 clear한다.&lt;/li&gt;
      &lt;li&gt;binlog-in-use가 설정되어있다면 server crash가 일어난 것을 의미하며, 이 경우 XA recovery가 필요하다.&lt;/li&gt;
      &lt;li&gt;binary log에 쓰인 모든 Xid 를 읽는다.&lt;/li&gt;
      &lt;li&gt;각 storage engine(InnoDB) prepare되었는데 commit이 안된 xid 이벤트는 commit한다.&lt;/li&gt;
      &lt;li&gt;storage engine(InnoDB)에 prepare되었는데, binlog xid list에 없었다면, binary log를 쓰지 못하고 crash된 것이기 때문에 rollback된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>MIN KIM</name><email>fabmichaela@gmail.com</email></author><category term="MySQL" /><summary type="html">Semi-Synchronous Replication on MySQL</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/%7B%22feature%22=%3E%22mysql.png%22%7D" /></entry></feed>