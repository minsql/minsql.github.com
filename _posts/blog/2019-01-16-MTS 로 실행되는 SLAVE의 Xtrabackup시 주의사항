---
title: MySQL 8.0 Window function
author: min_cho
created: 2019/01/16
modified:
layout: post
tags: mysql mysql8
image:
  feature: mysql.png
categories: MySQL
toc: true
toc_label: "My Table of Contents"
toc_icon: "cog"
---

# 현상
## innobackupex (Xtrabackup) Bacukup 실패발생
```
...snip...
190116 13:38:52 Connecting to MySQL server host: localhost, user: kadba, password: set, port: 13326, socket: /data1/mysql/mysql.sock
Using server version 5.7.23-23-log
The --slave-info option requires GTID enabled for a multi-threaded slave.
```

* Error Message에서 확인한대로 multi-threaded slave (sql 을 처리하는 worker thread를 n개 이상으로 사용하는 slave (n>1)) 를 사용할 시에, '--slave-info' 옵션을 사용하려면 꼭 GTID를 써야한다는 메세지 발생

## ORACLE의 mysqlbackup util은 정상적으로 backup되는것이 확인
 ```
./mysqlbackup backup --with-timestamp --user=kadba -p --socket=/data1/mysql/mysql.sock --backup-dir=/backup1/mysqlbackup_test/backupdr --slave-info

MySQL Enterprise Backup version 4.1.2 Linux-4.1.12-37.4.1.el6uek.x86_64-x86_64 [2018/07/23 15:13:55]
Copyright (c) 2003, 2018, Oracle and/or its affiliates. All Rights Reserved.
[Build ID : 13401143.32e59573fc6d0520d268d395dda7c9fd8b5427f5]
...snip...
-------------------------------------------------------------
   Parameters Summary
-------------------------------------------------------------
   Start LSN                  : 64932538368
   End LSN                    : 64932538691
-------------------------------------------------------------

mysqlbackup completed OK!
 ```


# 원인분석
## General Log를 통한 innobackupex, mysqlbackup 비교
### mysqlbackup
 ```
 ...
2019-01-16T02:28:35.183032Z      4933 Query     STOP SLAVE SQL_THREAD
2019-01-16T02:28:35.184252Z      4933 Query     SHOW GLOBAL STATUS LIKE 'slave_open_temp_tables'
...
2019-01-16T02:28:35.189576Z      4933 Query     FLUSH TABLES WITH READ LOCK
2019-01-16T02:28:35.190722Z      4933 Query     FLUSH ENGINE LOGS
2019-01-16T02:28:36.288052Z      4933 Query     SHOW MASTER STATUS
2019-01-16T02:28:36.288141Z      4933 Query     SHOW SLAVE STATUS
2019-01-16T02:28:36.288262Z      4933 Query     SELECT @@GLOBAL.gtid_mode
2019-01-16T02:28:36.288322Z      4933 Query     UNLOCK TABLES
..
2019-01-16T02:28:36.288831Z      4933 Query     START SLAVE SQL_THREAD
 ```
  * mysqlbackup의 경우, `STOP SLAVE SQL_THREAD` 를 진행하고, `SHOW GLOBAL STATUS LIKE 'slave_open_temp_tables'` 명령어를 통해 slave 에서 temp table을 만들어 DML이 실행되고 있는지를 판단단 후, Master 의 정보를 `SHOW SLAVE STATUS` 명령어를 통해 가져옴.

   * MASTER가 (`binlog_format:STATEMENT 혹은 MIXED` & `Temp table 생성후 해당 데이터를 통한 DML 사용`) 을 사용하는 환경에서 SLAVE에 해당 작업들이 전달된다면, sql_thread 에 의해 temp table을 만들고 일련의 작업을 진행하게됨. 하지만 위 과정이 진행되는 동안 (정확히는 sql_thread가 temp table 을 만들고 난 후) Backup을 받게 되면 일관성이 깨질 수 있음 (temp table은 backup이 되지 않기때문). 그로인해 ORACLE mysqlbackup에서는 `STOP SLAVE SQL_THREAD` 를 진행하여 안정성을 확보함 (관련변수 : (--safe-slave-backup-timeout)[https://dev.mysql.com/doc/mysql-enterprise-backup/4.1/en/backup-special-options.html#option_meb_safe-slave-backup-timeout] (default로 300초 이며, stop sql_thread 후 300초 이내에 (slave_open_temp_tables)[https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html#statvar_Slave_open_temp_tables] 값이 0 이 되지 않으면 백업실패, 값을 0으로 세팅하는 경우 stop 및 start를 진행하지 않음.))

   * 참고 메뉴얼 (Backing up and Restoring a Slave Database)[https://dev.mysql.com/doc/mysql-enterprise-backup/4.1/en/advanced.slave-backup-restore.html]

   * 우리는 `binlog_format` 을 `ROW`로 사용하고 있기 때문에 관련된 변수를 0으로 세팅하여 사용하지 않을 수도 있지만, binlog_format은 세션에 의존적으로 변경이 가능함으로 언제든 사용되어질 수 있음(대량의 데이터를 만드는 temp table 구문과 함께 해당 TABLE을 이용해 DML작업을 한다면 binlog format이 `STATEMENT` 가 유리할 수 있음 (binlog, relay-log의 io 및 storage, network 사용량을 줄일 수 있음))


### innobackupex
 ```
2019-01-16T02:49:56.911687Z      4985 Query     LOCK TABLES FOR BACKUP
2019-01-16T02:50:01.697234Z      4985 Query     LOCK BINLOG FOR BACKUP
2019-01-16T02:50:01.697311Z      4985 Query     SHOW SLAVE STATUS
2019-01-16T02:50:01.697444Z      4985 Query     SHOW VARIABLES
2019-01-16T02:50:01.699790Z      4985 Query     SHOW MASTER STATUS
2019-01-16T02:50:01.699857Z      4985 Query     SHOW VARIABLES
2019-01-16T02:50:01.701765Z      4985 Query     FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS
2019-01-16T02:50:01.902083Z      4985 Query     UNLOCK BINLOG
2019-01-16T02:50:01.902169Z      4985 Query     UNLOCK TABLES
```
 * innobackupex 에서는 default 옵션으로 사용할 시, `STOP SLAVE SQL_THREAD` 에 대한 절차가 없음으로 위의 취약점에 대비할 수 없을 뿐아니라, multi-threaded slave 를 사용할때에도 `SHOW SLAVE STATUS`를 통해 MASTER의 데이터를 가져오는데 문제를 발생시킬 수 있음 (여러 workers 가 동시에 작업을 처리하는 경우 해당 `SHOW SLAVE STATUS` 의 정보와 실제로 적용된 로그는 다를 수 있음)
  * 관련 메뉴얼
  > Inconsistencies in the sequence of transactions from the relay log which have been executed can cause this value to be a “low-water mark”. In other words, transactions appearing before the position are guaranteed to have committed, but transactions after the position may have committed or not. If these gaps need to be corrected, use START SLAVE UNTIL SQL_AFTER_MTS_GAPS. See Section 16.4.1.33, “Replication and Transaction Inconsistencies” for more information.
     - https://dev.mysql.com/doc/refman/5.7/en/show-slave-status.html
  * innobackupex 에서도 --safe-slave-backup 이라는 옵션이 존재하지만 default 는 OFF 로 사용됨.
  * --safe-slave-backup 을 사용하여, innobackupex 에서도 ORALCE mysqlbackup과 비슷한 방식으로 백업받으려 해도 실패 발생 (backup이 시작되는 과정에서 @@global.slave_parallel_workers 가 0 이 아니면 바로 에러발생)

 * 추가적으로 관련되어 정보를 확인한 결과, (LP #1372679: innobackupex --slave-info doesn't handle slave_parallel_workers>0)[https://jira.percona.com/browse/PXB-704] 라는 주제로 논의됨
  * (5번째 comment)[https://jira.percona.com/browse/PXB-704?focusedCommentId=205415&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-205415]에서 ORACLE에서 confirm을 받음
  * source는 2.4.13 에서 수정됨
   * JIRA - https://jira.percona.com/browse/PXB-1672
   * Gitbub - https://github.com/percona/percona-xtrabackup/pull/556/commits/fa625efac15f84936adc39fa8ed38382206c6629
  * 우리는 2.4.3 을 사용하고 있으며, 현재 최신 버젼 은 2.4.12 임 (2019-01-16 현재) - https://www.percona.com/doc/percona-xtrabackup/2.4/release-notes.html


# 적용방안

* 현재 우리가 쓰는 백업 옵션에서도, `--safe-slave-backup` 를 추가하여, 조금 더 안정적인 Backup을 받을 수 있음. (단점으로는 백업 단계중 MASTER의 정보를 알아내는 찰나의 순간 (slave_open_temp_tables > 0 인 경우, 해당시간은 늘어나며 이는  --safe-slave-backup-timeout 에 따라 조절됨 (해당시간을 초과하여 기다리는 경우 Backup실패 발생)) sql_thread는 stop 된 상태로 일을 하지 못하게 됨)

* @@global.slave_parallel_workers >0 이고, GTID를 사용하지 않는 환경에서는 innobackupex (Xtrabackup) 를 사용하지 못하게 됨. (2.4.13 release 후 `--safe-slave-backup` 옵션을 백업시에 추가하여 사용가능)

* 2.4.13 release 전 work-around 로는 backup이 시작되기전 `STOP SLAVE; SET GLOBAL slave_parallel_workers=0; START SLAVE;` 를 진행하고 backup이 끝나면 다시 @@global.slave_parallel_workers 의 값을 원복하여 사용하는 방법이 있음
